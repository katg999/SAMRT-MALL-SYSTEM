
Smart Mall System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000044e  00800200  0000148c  00001520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000148c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080064e  0080064e  0000196e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000196e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027c4  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f77  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001048  00000000  00000000  000052d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  0000631c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  000066bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120a  00000000  00000000  00006ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000081fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
       2:	00 00       	nop
       4:	bf c1       	rjmp	.+894    	; 0x384 <__vector_1>
       6:	00 00       	nop
       8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
       a:	00 00       	nop
       c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
       e:	00 00       	nop
      10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
      12:	00 00       	nop
      14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
      16:	00 00       	nop
      18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
      1e:	00 00       	nop
      20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
      22:	00 00       	nop
      24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
      26:	00 00       	nop
      28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	82 c0       	rjmp	.+260    	; 0x132 <__bad_interrupt>
      2e:	00 00       	nop
      30:	80 c0       	rjmp	.+256    	; 0x132 <__bad_interrupt>
      32:	00 00       	nop
      34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
      36:	00 00       	nop
      38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c2       	rjmp	.+1106   	; 0x498 <__vector_17>
      46:	00 00       	nop
      48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
      4e:	00 00       	nop
      50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
      52:	00 00       	nop
      54:	6e c0       	rjmp	.+220    	; 0x132 <__bad_interrupt>
      56:	00 00       	nop
      58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
      5e:	00 00       	nop
      60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
      62:	00 00       	nop
      64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
      66:	00 00       	nop
      68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
      6e:	00 00       	nop
      70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
      72:	00 00       	nop
      74:	5e c0       	rjmp	.+188    	; 0x132 <__bad_interrupt>
      76:	00 00       	nop
      78:	5c c0       	rjmp	.+184    	; 0x132 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5a c0       	rjmp	.+180    	; 0x132 <__bad_interrupt>
      7e:	00 00       	nop
      80:	58 c0       	rjmp	.+176    	; 0x132 <__bad_interrupt>
      82:	00 00       	nop
      84:	56 c0       	rjmp	.+172    	; 0x132 <__bad_interrupt>
      86:	00 00       	nop
      88:	54 c0       	rjmp	.+168    	; 0x132 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 c0       	rjmp	.+164    	; 0x132 <__bad_interrupt>
      8e:	00 00       	nop
      90:	50 c0       	rjmp	.+160    	; 0x132 <__bad_interrupt>
      92:	00 00       	nop
      94:	4e c0       	rjmp	.+156    	; 0x132 <__bad_interrupt>
      96:	00 00       	nop
      98:	4c c0       	rjmp	.+152    	; 0x132 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4a c0       	rjmp	.+148    	; 0x132 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	48 c0       	rjmp	.+144    	; 0x132 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	46 c0       	rjmp	.+140    	; 0x132 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	44 c0       	rjmp	.+136    	; 0x132 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	42 c0       	rjmp	.+132    	; 0x132 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	40 c0       	rjmp	.+128    	; 0x132 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3e c0       	rjmp	.+124    	; 0x132 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3c c0       	rjmp	.+120    	; 0x132 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3a c0       	rjmp	.+116    	; 0x132 <__bad_interrupt>
      be:	00 00       	nop
      c0:	38 c0       	rjmp	.+112    	; 0x132 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	36 c0       	rjmp	.+108    	; 0x132 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	34 c0       	rjmp	.+104    	; 0x132 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	32 c0       	rjmp	.+100    	; 0x132 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	30 c0       	rjmp	.+96     	; 0x132 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2e c0       	rjmp	.+92     	; 0x132 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2c c0       	rjmp	.+88     	; 0x132 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2a c0       	rjmp	.+84     	; 0x132 <__bad_interrupt>
      de:	00 00       	nop
      e0:	28 c0       	rjmp	.+80     	; 0x132 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6d 03       	fmul	r22, r21
      e6:	b4 03       	fmuls	r19, r20
      e8:	f6 03       	fmuls	r23, r22
      ea:	32 04       	cpc	r3, r2
      ec:	3c 04       	cpc	r3, r12
      ee:	3e 04       	cpc	r3, r14
      f0:	76 04       	cpc	r7, r6

000000f2 <__ctors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d1 e2       	ldi	r29, 0x21	; 33
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_copy_data>:
     102:	16 e0       	ldi	r17, 0x06	; 6
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b2 e0       	ldi	r27, 0x02	; 2
     108:	ec e8       	ldi	r30, 0x8C	; 140
     10a:	f4 e1       	ldi	r31, 0x14	; 20
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0b bf       	out	0x3b, r16	; 59
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x14>
     112:	07 90       	elpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	ae 34       	cpi	r26, 0x4E	; 78
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0x10>

0000011c <__do_clear_bss>:
     11c:	26 e0       	ldi	r18, 0x06	; 6
     11e:	ae e4       	ldi	r26, 0x4E	; 78
     120:	b6 e0       	ldi	r27, 0x06	; 6
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a3 37       	cpi	r26, 0x73	; 115
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	f1 d4       	rcall	.+2530   	; 0xb10 <main>
     12e:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <_exit>

00000132 <__bad_interrupt>:
     132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <time>:
     134:	fc 01       	movw	r30, r24
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	60 91 6f 06 	lds	r22, 0x066F	; 0x80066f <__system_time>
     13e:	70 91 70 06 	lds	r23, 0x0670	; 0x800670 <__system_time+0x1>
     142:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <__system_time+0x2>
     146:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <__system_time+0x3>
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	30 97       	sbiw	r30, 0x00	; 0
     14e:	21 f0       	breq	.+8      	; 0x158 <time+0x24>
     150:	60 83       	st	Z, r22
     152:	71 83       	std	Z+1, r23	; 0x01
     154:	82 83       	std	Z+2, r24	; 0x02
     156:	93 83       	std	Z+3, r25	; 0x03
     158:	08 95       	ret

0000015a <USART_Init>:
void Motor_Start() {
	PORTE |= (1 << PE7); // Set PE7 high to start the motor
}

void Motor_Stop() {
	PORTE &= ~(1 << PE7); // Set PE7 low to stop the motor
     15a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     15e:	83 e3       	ldi	r24, 0x33	; 51
     160:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     164:	88 e1       	ldi	r24, 0x18	; 24
     166:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     16a:	86 e0       	ldi	r24, 0x06	; 6
     16c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     170:	08 95       	ret

00000172 <USART_Transmit>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	fc 01       	movw	r30, r24
     178:	20 81       	ld	r18, Z
     17a:	22 23       	and	r18, r18
     17c:	69 f0       	breq	.+26     	; 0x198 <USART_Transmit+0x26>
     17e:	dc 01       	movw	r26, r24
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	e8 ec       	ldi	r30, 0xC8	; 200
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	ce ec       	ldi	r28, 0xCE	; 206
     188:	d0 e0       	ldi	r29, 0x00	; 0
     18a:	90 81       	ld	r25, Z
     18c:	95 ff       	sbrs	r25, 5
     18e:	fd cf       	rjmp	.-6      	; 0x18a <USART_Transmit+0x18>
     190:	28 83       	st	Y, r18
     192:	2d 91       	ld	r18, X+
     194:	21 11       	cpse	r18, r1
     196:	f9 cf       	rjmp	.-14     	; 0x18a <USART_Transmit+0x18>
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <USART_ReceiveChar>:
     19e:	e8 ec       	ldi	r30, 0xC8	; 200
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	88 23       	and	r24, r24
     1a6:	ec f7       	brge	.-6      	; 0x1a2 <USART_ReceiveChar+0x4>
     1a8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     1ac:	08 95       	ret

000001ae <USART_ReceiveInt>:
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	2a 97       	sbiw	r28, 0x0a	; 10
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	7c 01       	movw	r14, r24
     1d0:	00 e0       	ldi	r16, 0x00	; 0
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	e4 df       	rcall	.-56     	; 0x19e <USART_ReceiveChar>
     1d6:	8d 30       	cpi	r24, 0x0D	; 13
     1d8:	11 f0       	breq	.+4      	; 0x1de <USART_ReceiveInt+0x30>
     1da:	8a 30       	cpi	r24, 0x0A	; 10
     1dc:	59 f4       	brne	.+22     	; 0x1f4 <USART_ReceiveInt+0x46>
     1de:	e1 e0       	ldi	r30, 0x01	; 1
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	ec 0f       	add	r30, r28
     1e4:	fd 1f       	adc	r31, r29
     1e6:	e0 0f       	add	r30, r16
     1e8:	f1 1f       	adc	r31, r17
     1ea:	10 82       	st	Z, r1
     1ec:	ce 01       	movw	r24, r28
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	89 d5       	rcall	.+2834   	; 0xd04 <atoi>
     1f2:	06 c0       	rjmp	.+12     	; 0x200 <USART_ReceiveInt+0x52>
     1f4:	0f 5f       	subi	r16, 0xFF	; 255
     1f6:	1f 4f       	sbci	r17, 0xFF	; 255
     1f8:	f7 01       	movw	r30, r14
     1fa:	81 93       	st	Z+, r24
     1fc:	7f 01       	movw	r14, r30
     1fe:	ea cf       	rjmp	.-44     	; 0x1d4 <USART_ReceiveInt+0x26>
     200:	2a 96       	adiw	r28, 0x0a	; 10
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	08 95       	ret

0000021a <set_configurations>:
     21a:	44 e0       	ldi	r20, 0x04	; 4
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	85 e1       	ldi	r24, 0x15	; 21
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	0e 94 be 09 	call	0x137c	; 0x137c <eeprom_update_block>
     22a:	44 e0       	ldi	r20, 0x04	; 4
     22c:	50 e0       	ldi	r21, 0x00	; 0
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	81 e1       	ldi	r24, 0x11	; 17
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	0e 94 be 09 	call	0x137c	; 0x137c <eeprom_update_block>
     23a:	44 e0       	ldi	r20, 0x04	; 4
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	68 e0       	ldi	r22, 0x08	; 8
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	8d e0       	ldi	r24, 0x0D	; 13
     244:	92 e0       	ldi	r25, 0x02	; 2
     246:	0e 94 be 09 	call	0x137c	; 0x137c <eeprom_update_block>
     24a:	e8 e0       	ldi	r30, 0x08	; 8
     24c:	f2 e0       	ldi	r31, 0x02	; 2
     24e:	01 90       	ld	r0, Z+
     250:	00 20       	and	r0, r0
     252:	e9 f7       	brne	.-6      	; 0x24e <set_configurations+0x34>
     254:	af 01       	movw	r20, r30
     256:	48 50       	subi	r20, 0x08	; 8
     258:	52 40       	sbci	r21, 0x02	; 2
     25a:	6c e0       	ldi	r22, 0x0C	; 12
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	0e 94 be 09 	call	0x137c	; 0x137c <eeprom_update_block>
     266:	e4 e0       	ldi	r30, 0x04	; 4
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	01 90       	ld	r0, Z+
     26c:	00 20       	and	r0, r0
     26e:	e9 f7       	brne	.-6      	; 0x26a <set_configurations+0x50>
     270:	af 01       	movw	r20, r30
     272:	44 50       	subi	r20, 0x04	; 4
     274:	52 40       	sbci	r21, 0x02	; 2
     276:	60 e1       	ldi	r22, 0x10	; 16
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	84 e0       	ldi	r24, 0x04	; 4
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 be 09 	call	0x137c	; 0x137c <eeprom_update_block>
     282:	60 91 58 06 	lds	r22, 0x0658	; 0x800658 <washroomStatus>
     286:	80 e2       	ldi	r24, 0x20	; 32
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 cd 09 	call	0x139a	; 0x139a <eeprom_update_byte>
     28e:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <rentDue>
     292:	88 e2       	ldi	r24, 0x28	; 40
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0c 94 cd 09 	jmp	0x139a	; 0x139a <eeprom_update_byte>
     29a:	08 95       	ret

0000029c <lcd_command>:
     29c:	e2 e0       	ldi	r30, 0x02	; 2
     29e:	f1 e0       	ldi	r31, 0x01	; 1
     2a0:	90 81       	ld	r25, Z
     2a2:	9e 7f       	andi	r25, 0xFE	; 254
     2a4:	90 83       	st	Z, r25
     2a6:	90 81       	ld	r25, Z
     2a8:	9d 7f       	andi	r25, 0xFD	; 253
     2aa:	90 83       	st	Z, r25
     2ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     2b0:	80 81       	ld	r24, Z
     2b2:	84 60       	ori	r24, 0x04	; 4
     2b4:	80 83       	st	Z, r24
     2b6:	00 00       	nop
     2b8:	80 81       	ld	r24, Z
     2ba:	8b 7f       	andi	r24, 0xFB	; 251
     2bc:	80 83       	st	Z, r24
     2be:	83 ef       	ldi	r24, 0xF3	; 243
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_command+0x26>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_command+0x2c>
     2c8:	00 00       	nop
     2ca:	08 95       	ret

000002cc <lcd_data>:
     2cc:	e2 e0       	ldi	r30, 0x02	; 2
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	90 81       	ld	r25, Z
     2d2:	91 60       	ori	r25, 0x01	; 1
     2d4:	90 83       	st	Z, r25
     2d6:	90 81       	ld	r25, Z
     2d8:	9d 7f       	andi	r25, 0xFD	; 253
     2da:	90 83       	st	Z, r25
     2dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     2e0:	80 81       	ld	r24, Z
     2e2:	84 60       	ori	r24, 0x04	; 4
     2e4:	80 83       	st	Z, r24
     2e6:	00 00       	nop
     2e8:	80 81       	ld	r24, Z
     2ea:	8b 7f       	andi	r24, 0xFB	; 251
     2ec:	80 83       	st	Z, r24
     2ee:	83 ef       	ldi	r24, 0xF3	; 243
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_data+0x26>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <lcd_data+0x2c>
     2f8:	00 00       	nop
     2fa:	08 95       	ret

000002fc <lcd_init>:
     2fc:	e1 e0       	ldi	r30, 0x01	; 1
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	80 81       	ld	r24, Z
     302:	87 60       	ori	r24, 0x07	; 7
     304:	80 83       	st	Z, r24
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     30c:	87 e8       	ldi	r24, 0x87	; 135
     30e:	93 e1       	ldi	r25, 0x13	; 19
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x14>
     314:	00 c0       	rjmp	.+0      	; 0x316 <lcd_init+0x1a>
     316:	00 00       	nop
     318:	88 e3       	ldi	r24, 0x38	; 56
     31a:	c0 df       	rcall	.-128    	; 0x29c <lcd_command>
     31c:	81 ee       	ldi	r24, 0xE1	; 225
     31e:	94 e0       	ldi	r25, 0x04	; 4
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <lcd_init+0x24>
     324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_init+0x2a>
     326:	00 00       	nop
     328:	88 e3       	ldi	r24, 0x38	; 56
     32a:	b8 df       	rcall	.-144    	; 0x29c <lcd_command>
     32c:	89 ef       	ldi	r24, 0xF9	; 249
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <lcd_init+0x34>
     334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_init+0x3a>
     336:	00 00       	nop
     338:	88 e3       	ldi	r24, 0x38	; 56
     33a:	b0 df       	rcall	.-160    	; 0x29c <lcd_command>
     33c:	8c e0       	ldi	r24, 0x0C	; 12
     33e:	ae df       	rcall	.-164    	; 0x29c <lcd_command>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	ac df       	rcall	.-168    	; 0x29c <lcd_command>
     344:	83 ef       	ldi	r24, 0xF3	; 243
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_init+0x4c>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_init+0x52>
     34e:	00 00       	nop
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	a4 cf       	rjmp	.-184    	; 0x29c <lcd_command>
     354:	08 95       	ret

00000356 <lcd_string>:
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	ec 01       	movw	r28, r24
     35c:	88 81       	ld	r24, Y
     35e:	88 23       	and	r24, r24
     360:	29 f0       	breq	.+10     	; 0x36c <lcd_string+0x16>
     362:	21 96       	adiw	r28, 0x01	; 1
     364:	b3 df       	rcall	.-154    	; 0x2cc <lcd_data>
     366:	89 91       	ld	r24, Y+
     368:	81 11       	cpse	r24, r1
     36a:	fc cf       	rjmp	.-8      	; 0x364 <lcd_string+0xe>
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <lcd_clear>:
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	93 df       	rcall	.-218    	; 0x29c <lcd_command>
     376:	83 ef       	ldi	r24, 0xF3	; 243
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcd_clear+0x8>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <lcd_clear+0xe>
     380:	00 00       	nop
     382:	08 95       	ret

00000384 <__vector_1>:
     384:	1f 92       	push	r1
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	0b b6       	in	r0, 0x3b	; 59
     390:	0f 92       	push	r0
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ef 93       	push	r30
     3ac:	ff 93       	push	r31
     3ae:	48 9b       	sbis	0x09, 0	; 9
     3b0:	47 c0       	rjmp	.+142    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3b2:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <motion_detected>
     3b6:	81 11       	cpse	r24, r1
     3b8:	45 c0       	rjmp	.+138    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3ba:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <people_count>
     3be:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <people_count+0x1>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <people_count+0x1>
     3c8:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <people_count>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <motion_detected>
     3d2:	ea e0       	ldi	r30, 0x0A	; 10
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	80 81       	ld	r24, Z
     3d8:	83 60       	ori	r24, 0x03	; 3
     3da:	80 83       	st	Z, r24
     3dc:	cb e0       	ldi	r28, 0x0B	; 11
     3de:	d1 e0       	ldi	r29, 0x01	; 1
     3e0:	88 81       	ld	r24, Y
     3e2:	83 60       	ori	r24, 0x03	; 3
     3e4:	88 83       	st	Y, r24
     3e6:	c5 df       	rcall	.-118    	; 0x372 <lcd_clear>
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	58 df       	rcall	.-336    	; 0x29c <lcd_command>
     3ec:	89 e1       	ldi	r24, 0x19	; 25
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	b2 df       	rcall	.-156    	; 0x356 <lcd_string>
     3f2:	80 ec       	ldi	r24, 0xC0	; 192
     3f4:	53 df       	rcall	.-346    	; 0x29c <lcd_command>
     3f6:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <people_count+0x1>
     3fa:	8f 93       	push	r24
     3fc:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <people_count>
     400:	8f 93       	push	r24
     402:	8b e2       	ldi	r24, 0x2B	; 43
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	8b e5       	ldi	r24, 0x5B	; 91
     40c:	96 e0       	ldi	r25, 0x06	; 6
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	c9 d4       	rcall	.+2450   	; 0xda6 <sprintf>
     414:	8b e5       	ldi	r24, 0x5B	; 91
     416:	96 e0       	ldi	r25, 0x06	; 6
     418:	9e df       	rcall	.-196    	; 0x356 <lcd_string>
     41a:	2f e3       	ldi	r18, 0x3F	; 63
     41c:	82 e4       	ldi	r24, 0x42	; 66
     41e:	9f e0       	ldi	r25, 0x0F	; 15
     420:	21 50       	subi	r18, 0x01	; 1
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	90 40       	sbci	r25, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
     42c:	88 81       	ld	r24, Y
     42e:	8c 7f       	andi	r24, 0xFC	; 252
     430:	88 83       	st	Y, r24
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <motion_detected>
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0b be       	out	0x3b, r0	; 59
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <Timer1_Init>:
     46e:	e1 e8       	ldi	r30, 0x81	; 129
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	88 60       	ori	r24, 0x08	; 8
     476:	80 83       	st	Z, r24
     478:	af e6       	ldi	r26, 0x6F	; 111
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	8c 91       	ld	r24, X
     47e:	82 60       	ori	r24, 0x02	; 2
     480:	8c 93       	st	X, r24
     482:	84 e8       	ldi	r24, 0x84	; 132
     484:	9e e1       	ldi	r25, 0x1E	; 30
     486:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     48a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     48e:	80 81       	ld	r24, Z
     490:	85 60       	ori	r24, 0x05	; 5
     492:	80 83       	st	Z, r24
     494:	78 94       	sei
     496:	08 95       	ret

00000498 <__vector_17>:
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	0b b6       	in	r0, 0x3b	; 59
     4a4:	0f 92       	push	r0
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	4f 93       	push	r20
     4ac:	5f 93       	push	r21
     4ae:	6f 93       	push	r22
     4b0:	7f 93       	push	r23
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	af 93       	push	r26
     4b8:	bf 93       	push	r27
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
     4be:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__data_end>
     4c2:	88 23       	and	r24, r24
     4c4:	81 f0       	breq	.+32     	; 0x4e6 <__vector_17+0x4e>
     4c6:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <tempAccessTimeout>
     4ca:	88 23       	and	r24, r24
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <__vector_17+0x4e>
     4ce:	81 50       	subi	r24, 0x01	; 1
     4d0:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <tempAccessTimeout>
     4d4:	81 11       	cpse	r24, r1
     4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__vector_17+0x4e>
     4d8:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <__data_end>
     4dc:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <tempAccessCode>
     4e0:	8b e3       	ldi	r24, 0x3B	; 59
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	46 de       	rcall	.-884    	; 0x172 <USART_Transmit>
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <lcd2_command>:
	lcd2_command(LCD2_ENTRY_MODE); // Set entry mode
}

// Function to send command to the second LCD
void lcd2_command(unsigned char command) {
	PORTB = command;      // Place command on data pins
     50c:	85 b9       	out	0x05, r24	; 5
	PORTA &= ~(1 << PA0); // RS = 0 for command
     50e:	10 98       	cbi	0x02, 0	; 2
	PORTA &= ~(1 << PA1); // RW = 0 for write
     510:	11 98       	cbi	0x02, 1	; 2
	PORTA |= (1 << PA2);  // Enable pulse
     512:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     514:	89 ef       	ldi	r24, 0xF9	; 249
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <lcd2_command+0xc>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <lcd2_command+0x12>
     51e:	00 00       	nop
	_delay_ms(1);
	PORTA &= ~(1 << PA2);
     520:	12 98       	cbi	0x02, 2	; 2
     522:	89 ef       	ldi	r24, 0xF9	; 249
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <lcd2_command+0x1a>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd2_command+0x20>
     52c:	00 00       	nop
     52e:	08 95       	ret

00000530 <lcd2_init>:
// 	}
// }

// Second LCD Initialization
void lcd2_init() {
	DDRB = 0xFF;         // Configure PORTB as output for data pins
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	84 b9       	out	0x04, r24	; 4
	DDRA |= (1 << PA0) | (1 << PA1) | (1 << PA2); // Configure control pins as output
     534:	81 b1       	in	r24, 0x01	; 1
     536:	87 60       	ori	r24, 0x07	; 7
     538:	81 b9       	out	0x01, r24	; 1
     53a:	87 e8       	ldi	r24, 0x87	; 135
     53c:	93 e1       	ldi	r25, 0x13	; 19
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <lcd2_init+0xe>
     542:	00 c0       	rjmp	.+0      	; 0x544 <lcd2_init+0x14>
     544:	00 00       	nop
	_delay_ms(20);       // Wait for LCD to power up
	lcd2_command(LCD2_8BIT_MODE);  // 8-bit mode, 2 lines, 5x7 font
     546:	88 e3       	ldi	r24, 0x38	; 56
     548:	e1 df       	rcall	.-62     	; 0x50c <lcd2_command>
	lcd2_command(LCD2_DISPLAY_ON); // Display ON, cursor OFF
     54a:	8c e0       	ldi	r24, 0x0C	; 12
     54c:	df df       	rcall	.-66     	; 0x50c <lcd2_command>
	lcd2_command(LCD2_CLEAR);      // Clear display
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	dd df       	rcall	.-70     	; 0x50c <lcd2_command>
	lcd2_command(LCD2_ENTRY_MODE); // Set entry mode
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	db cf       	rjmp	.-74     	; 0x50c <lcd2_command>
     556:	08 95       	ret

00000558 <lcd2_display>:
     558:	fc 01       	movw	r30, r24
	_delay_ms(1);
}

// Function to display string on the second LCD
void lcd2_display(char *str) {
	while (*str) {
     55a:	90 81       	ld	r25, Z
     55c:	99 23       	and	r25, r25
     55e:	a9 f0       	breq	.+42     	; 0x58a <lcd2_display+0x32>
     560:	31 96       	adiw	r30, 0x01	; 1
		PORTB = *str++;         // Place character on data pins
     562:	95 b9       	out	0x05, r25	; 5
		PORTA |= (1 << PA0);    // RS = 1 for data
     564:	10 9a       	sbi	0x02, 0	; 2
		PORTA &= ~(1 << PA1);   // RW = 0 for write
     566:	11 98       	cbi	0x02, 1	; 2
		PORTA |= (1 << PA2);    // Enable pulse
     568:	12 9a       	sbi	0x02, 2	; 2
     56a:	89 ef       	ldi	r24, 0xF9	; 249
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <lcd2_display+0x16>
     572:	00 c0       	rjmp	.+0      	; 0x574 <lcd2_display+0x1c>
     574:	00 00       	nop
		_delay_ms(1);
		PORTA &= ~(1 << PA2);
     576:	12 98       	cbi	0x02, 2	; 2
     578:	89 ef       	ldi	r24, 0xF9	; 249
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd2_display+0x24>
     580:	00 c0       	rjmp	.+0      	; 0x582 <lcd2_display+0x2a>
     582:	00 00       	nop
	_delay_ms(1);
}

// Function to display string on the second LCD
void lcd2_display(char *str) {
	while (*str) {
     584:	91 91       	ld	r25, Z+
     586:	91 11       	cpse	r25, r1
     588:	ec cf       	rjmp	.-40     	; 0x562 <lcd2_display+0xa>
     58a:	08 95       	ret

0000058c <lcd2_clear>:
	}
}

// Function to clear the second LCD screen
void lcd2_clear() {
	lcd2_command(LCD2_CLEAR);
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	be df       	rcall	.-132    	; 0x50c <lcd2_command>
     590:	83 ef       	ldi	r24, 0xF3	; 243
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <lcd2_clear+0x8>
     598:	00 c0       	rjmp	.+0      	; 0x59a <lcd2_clear+0xe>
     59a:	00 00       	nop
     59c:	08 95       	ret

0000059e <updateFloorRatesEEPROM>:



// Function to update EEPROM with floor rents
void updateFloorRatesEEPROM() {
	eeprom_update_dword((uint32_t*)FIRST_FLOOR_ADDRESS, firstFloor);
     59e:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <firstFloor>
     5a2:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <firstFloor+0x1>
     5a6:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <firstFloor+0x2>
     5aa:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <firstFloor+0x3>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	05 d7       	rcall	.+3594   	; 0x13be <eeprom_update_dword>
	eeprom_update_dword((uint32_t*)SECOND_FLOOR_ADDRESS, secondFloor);
     5b4:	40 91 11 02 	lds	r20, 0x0211	; 0x800211 <secondFloor>
     5b8:	50 91 12 02 	lds	r21, 0x0212	; 0x800212 <secondFloor+0x1>
     5bc:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <secondFloor+0x2>
     5c0:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <secondFloor+0x3>
     5c4:	84 e0       	ldi	r24, 0x04	; 4
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fa d6       	rcall	.+3572   	; 0x13be <eeprom_update_dword>
	eeprom_update_dword((uint32_t*)THIRD_FLOOR_ADDRESS, thirdFloor);
     5ca:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <thirdFloor>
     5ce:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <thirdFloor+0x1>
     5d2:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <thirdFloor+0x2>
     5d6:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <thirdFloor+0x3>
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	ef c6       	rjmp	.+3550   	; 0x13be <eeprom_update_dword>
     5e0:	08 95       	ret

000005e2 <USART_TransmitInt>:
}

// Transmit integer via USART
void USART_TransmitInt(int num) {
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2a 97       	sbiw	r28, 0x0a	; 10
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5f6:	4a e0       	ldi	r20, 0x0A	; 10
     5f8:	be 01       	movw	r22, r28
     5fa:	6f 5f       	subi	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	a8 d3       	rcall	.+1872   	; 0xd50 <__itoa_ncheck>
	char buffer[10]; // Buffer to hold the string representation of the integer
	itoa(num, buffer, 10); // Convert integer to string (base 10)
	USART_Transmit(buffer); // Transmit the string
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	b6 dd       	rcall	.-1172   	; 0x172 <USART_Transmit>
}
     606:	2a 96       	adiw	r28, 0x0a	; 10
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <displayFloorRates>:

void displayFloorRates() {
	USART_Transmit("First Floor Rate: ");
     618:	83 e8       	ldi	r24, 0x83	; 131
     61a:	95 e0       	ldi	r25, 0x05	; 5
     61c:	aa dd       	rcall	.-1196   	; 0x172 <USART_Transmit>
	USART_TransmitInt(firstFloor);
     61e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <firstFloor>
     622:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <firstFloor+0x1>
     626:	dd df       	rcall	.-70     	; 0x5e2 <USART_TransmitInt>
	USART_Transmit("\r\nSecond Floor Rate: ");
     628:	87 e6       	ldi	r24, 0x67	; 103
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	a2 dd       	rcall	.-1212   	; 0x172 <USART_Transmit>
	USART_TransmitInt(secondFloor);
     62e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <secondFloor>
     632:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <secondFloor+0x1>
	USART_Transmit("\r\nThird Floor Rate: ");
     636:	d5 df       	rcall	.-86     	; 0x5e2 <USART_TransmitInt>
     638:	8d e7       	ldi	r24, 0x7D	; 125
     63a:	92 e0       	ldi	r25, 0x02	; 2
	USART_TransmitInt(thirdFloor);
     63c:	9a dd       	rcall	.-1228   	; 0x172 <USART_Transmit>
     63e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <thirdFloor>
     642:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <thirdFloor+0x1>
	USART_Transmit("\r\n");
     646:	cd df       	rcall	.-102    	; 0x5e2 <USART_TransmitInt>
     648:	81 ef       	ldi	r24, 0xF1	; 241
     64a:	95 e0       	ldi	r25, 0x05	; 5
     64c:	92 cd       	rjmp	.-1244   	; 0x172 <USART_Transmit>
     64e:	08 95       	ret

00000650 <tenant_management_system>:
}

// Main tenant management function
void tenant_management_system() {
     650:	6f 92       	push	r6
     652:	7f 92       	push	r7
     654:	8f 92       	push	r8
     656:	9f 92       	push	r9
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	29 97       	sbiw	r28, 0x09	; 9
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
	unsigned char enteredPass[5] = {0};
     67c:	fe 01       	movw	r30, r28
     67e:	31 96       	adiw	r30, 0x01	; 1
     680:	85 e0       	ldi	r24, 0x05	; 5
     682:	df 01       	movw	r26, r30
     684:	1d 92       	st	X+, r1
     686:	8a 95       	dec	r24
     688:	e9 f7       	brne	.-6      	; 0x684 <tenant_management_system+0x34>
	uint8_t rentPaid = 0; // 0 = Not Paid, 1 = Paid

	// Configure PE7 as output for motor control
	DDRE |= (1 << PE7); // Set PE7 as output
     68a:	6f 9a       	sbi	0x0d, 7	; 13

	// Initialize the second LCD
	lcd2_init();
     68c:	51 df       	rcall	.-350    	; 0x530 <lcd2_init>
	
	// Initialize EEPROM with floor rates
	updateFloorRatesEEPROM();
     68e:	87 df       	rcall	.-242    	; 0x59e <updateFloorRatesEEPROM>
     690:	71 2c       	mov	r7, r1
}

// Main tenant management function
void tenant_management_system() {
	unsigned char enteredPass[5] = {0};
	uint8_t rentPaid = 0; // 0 = Not Paid, 1 = Paid
     692:	04 e5       	ldi	r16, 0x54	; 84
     694:	16 e0       	ldi	r17, 0x06	; 6
     696:	0f 2e       	mov	r0, r31
			USART_Transmit("\nASSIGN TEMPORARY ACCESS\r\nEnter a 4-digit access code: ");
			for (int i = 0; i < 4; i++) {
				tempAccessCode[i] = USART_ReceiveChar();
				USART_Transmit("*");
			}
			tempAccessCode[4] = '\0';
     698:	f0 e5       	ldi	r31, 0x50	; 80
     69a:	cf 2e       	mov	r12, r31
     69c:	f6 e0       	ldi	r31, 0x06	; 6
     69e:	df 2e       	mov	r13, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	66 24       	eor	r6, r6
				USART_Transmit(timeoutStr[i]);
				i++;
			}
			timeoutStr[i] = '\0';
			tempAccessTimeout = atoi(timeoutStr);
			timeoutActive = 1;
     6a4:	63 94       	inc	r6
     6a6:	7e 01       	movw	r14, r28
     6a8:	b5 e0       	ldi	r27, 0x05	; 5
     6aa:	eb 0e       	add	r14, r27
     6ac:	f1 1c       	adc	r15, r1
     6ae:	82 e9       	ldi	r24, 0x92	; 146
	
	// Initialize EEPROM with floor rates
	updateFloorRatesEEPROM();

	while (1) {
		USART_Transmit("\nTenant Management System Menu\r\n");
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	5f dd       	rcall	.-1346   	; 0x172 <USART_Transmit>
     6b4:	83 eb       	ldi	r24, 0xB3	; 179
		USART_Transmit("1. Pay Rent\r\n2. Access Washroom\r\n3. Assign Temporary Access\r\n4. Check Rent Status\r\n5. View Floor Rates\r\n6. Set Floor Rates (Admin)\r\n7. Exit System\r\n");
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	5c dd       	rcall	.-1352   	; 0x172 <USART_Transmit>
     6ba:	88 e4       	ldi	r24, 0x48	; 72
		USART_Transmit("Enter your choice: ");
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	59 dd       	rcall	.-1358   	; 0x172 <USART_Transmit>
     6c0:	6e dd       	rcall	.-1316   	; 0x19e <USART_ReceiveChar>
     6c2:	e8 2f       	mov	r30, r24
		int choice = USART_ReceiveChar() - '0';
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	f1 97       	sbiw	r30, 0x31	; 49

		switch (choice) {
     6c8:	e7 30       	cpi	r30, 0x07	; 7
     6ca:	f1 05       	cpc	r31, r1
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <tenant_management_system+0x80>
     6ce:	12 c1       	rjmp	.+548    	; 0x8f4 <tenant_management_system+0x2a4>
     6d0:	88 27       	eor	r24, r24
     6d2:	ee 58       	subi	r30, 0x8E	; 142
     6d4:	ff 4f       	sbci	r31, 0xFF	; 255
     6d6:	8f 4f       	sbci	r24, 0xFF	; 255
     6d8:	b8 c2       	rjmp	.+1392   	; 0xc4a <__tablejump2__>
     6da:	8c e5       	ldi	r24, 0x5C	; 92
			case 1:
			USART_Transmit("\nRENT PAYMENT SECTION\r\nSelect Floor (1 for First Floor, 2 for Second Floor, 3 for Third Floor): ");
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	49 dd       	rcall	.-1390   	; 0x172 <USART_Transmit>
     6e0:	5e dd       	rcall	.-1348   	; 0x19e <USART_ReceiveChar>
     6e2:	90 e0       	ldi	r25, 0x00	; 0
			int floorChoice = USART_ReceiveChar() - '0';
     6e4:	c0 97       	sbiw	r24, 0x30	; 48
     6e6:	82 30       	cpi	r24, 0x02	; 2
			uint32_t expectedAmount = 0;

			// Determine expected amount based on selected floor
			switch (floorChoice) {
     6e8:	91 05       	cpc	r25, r1
     6ea:	71 f0       	breq	.+28     	; 0x708 <tenant_management_system+0xb8>
     6ec:	83 30       	cpi	r24, 0x03	; 3
     6ee:	91 05       	cpc	r25, r1
     6f0:	a1 f0       	breq	.+40     	; 0x71a <tenant_management_system+0xca>
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	d9 f4       	brne	.+54     	; 0x72c <tenant_management_system+0xdc>
     6f6:	80 90 15 02 	lds	r8, 0x0215	; 0x800215 <firstFloor>
     6fa:	90 90 16 02 	lds	r9, 0x0216	; 0x800216 <firstFloor+0x1>
				case 1: expectedAmount = firstFloor; break;
     6fe:	a0 90 17 02 	lds	r10, 0x0217	; 0x800217 <firstFloor+0x2>
     702:	b0 90 18 02 	lds	r11, 0x0218	; 0x800218 <firstFloor+0x3>
     706:	16 c0       	rjmp	.+44     	; 0x734 <tenant_management_system+0xe4>
     708:	80 90 11 02 	lds	r8, 0x0211	; 0x800211 <secondFloor>
     70c:	90 90 12 02 	lds	r9, 0x0212	; 0x800212 <secondFloor+0x1>
				case 2: expectedAmount = secondFloor; break;
     710:	a0 90 13 02 	lds	r10, 0x0213	; 0x800213 <secondFloor+0x2>
     714:	b0 90 14 02 	lds	r11, 0x0214	; 0x800214 <secondFloor+0x3>
     718:	0d c0       	rjmp	.+26     	; 0x734 <tenant_management_system+0xe4>
     71a:	80 90 0d 02 	lds	r8, 0x020D	; 0x80020d <thirdFloor>
     71e:	90 90 0e 02 	lds	r9, 0x020E	; 0x80020e <thirdFloor+0x1>
				case 3: expectedAmount = thirdFloor; break;
     722:	a0 90 0f 02 	lds	r10, 0x020F	; 0x80020f <thirdFloor+0x2>
     726:	b0 90 10 02 	lds	r11, 0x0210	; 0x800210 <thirdFloor+0x3>
     72a:	04 c0       	rjmp	.+8      	; 0x734 <tenant_management_system+0xe4>
     72c:	8d eb       	ldi	r24, 0xBD	; 189
				default:
				USART_Transmit("Invalid floor selection.\r\n");
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	20 dd       	rcall	.-1472   	; 0x172 <USART_Transmit>
     732:	bd cf       	rjmp	.-134    	; 0x6ae <tenant_management_system+0x5e>
     734:	88 ed       	ldi	r24, 0xD8	; 216
     736:	93 e0       	ldi	r25, 0x03	; 3
				continue;
			}

			USART_Transmit("\nEnter amount to pay: ");
     738:	1c dd       	rcall	.-1480   	; 0x172 <USART_Transmit>
     73a:	39 dd       	rcall	.-1422   	; 0x1ae <USART_ReceiveInt>
     73c:	09 2e       	mov	r0, r25
     73e:	00 0c       	add	r0, r0
			uint32_t rentAmount = USART_ReceiveInt();
     740:	aa 0b       	sbc	r26, r26
     742:	bb 0b       	sbc	r27, r27
			
			if (rentAmount == expectedAmount) {
     744:	88 16       	cp	r8, r24
     746:	99 06       	cpc	r9, r25
     748:	aa 06       	cpc	r10, r26
     74a:	bb 06       	cpc	r11, r27
     74c:	49 f4       	brne	.+18     	; 0x760 <tenant_management_system+0x110>
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	88 e2       	ldi	r24, 0x28	; 40
				rentPaid = 1; // Mark rent as paid
				eeprom_update_byte((uint8_t*)RENT_DUE_ADDRESS, 0); // Update rent due status in EEPROM
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	22 d6       	rcall	.+3140   	; 0x139a <eeprom_update_byte>
     756:	8f ee       	ldi	r24, 0xEF	; 239
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0b dd       	rcall	.-1514   	; 0x172 <USART_Transmit>
				USART_Transmit("Rent payment processed successfully.\r\n");
     75c:	76 2c       	mov	r7, r6
     75e:	cd c0       	rjmp	.+410    	; 0x8fa <tenant_management_system+0x2aa>
     760:	86 e1       	ldi	r24, 0x16	; 22

			USART_Transmit("\nEnter amount to pay: ");
			uint32_t rentAmount = USART_ReceiveInt();
			
			if (rentAmount == expectedAmount) {
				rentPaid = 1; // Mark rent as paid
     762:	94 e0       	ldi	r25, 0x04	; 4
				eeprom_update_byte((uint8_t*)RENT_DUE_ADDRESS, 0); // Update rent due status in EEPROM
				USART_Transmit("Rent payment processed successfully.\r\n");
				} else {
				USART_Transmit("Incorrect amount entered. Rent payment failed.\r\n");
     764:	06 dd       	rcall	.-1524   	; 0x172 <USART_Transmit>
     766:	c9 c0       	rjmp	.+402    	; 0x8fa <tenant_management_system+0x2aa>
     768:	71 10       	cpse	r7, r1
     76a:	04 c0       	rjmp	.+8      	; 0x774 <tenant_management_system+0x124>
			}
			break;

			case 2:
			if (!rentPaid) {
     76c:	87 e4       	ldi	r24, 0x47	; 71
     76e:	94 e0       	ldi	r25, 0x04	; 4
				USART_Transmit("Access denied. Rent is due.\r\n");
     770:	00 dd       	rcall	.-1536   	; 0x172 <USART_Transmit>
     772:	c3 c0       	rjmp	.+390    	; 0x8fa <tenant_management_system+0x2aa>
     774:	85 e6       	ldi	r24, 0x65	; 101
				break;
     776:	94 e0       	ldi	r25, 0x04	; 4
			}
			
			USART_Transmit("\nWASHROOM ACCESS\r\nEnter washroom password: ");
     778:	fc dc       	rcall	.-1544   	; 0x172 <USART_Transmit>
     77a:	fe 01       	movw	r30, r28
     77c:	31 96       	adiw	r30, 0x01	; 1
     77e:	5f 01       	movw	r10, r30
     780:	0e dd       	rcall	.-1508   	; 0x19e <USART_ReceiveChar>
     782:	d5 01       	movw	r26, r10
			for (int i = 0; i < 4; i++) {
				enteredPass[i] = USART_ReceiveChar();
     784:	8d 93       	st	X+, r24
     786:	5d 01       	movw	r10, r26
     788:	81 e9       	ldi	r24, 0x91	; 145
     78a:	94 e0       	ldi	r25, 0x04	; 4
     78c:	f2 dc       	rcall	.-1564   	; 0x172 <USART_Transmit>
				USART_Transmit("*");
     78e:	ae 14       	cp	r10, r14
     790:	bf 04       	cpc	r11, r15
     792:	b1 f7       	brne	.-20     	; 0x780 <tenant_management_system+0x130>
				USART_Transmit("Access denied. Rent is due.\r\n");
				break;
			}
			
			USART_Transmit("\nWASHROOM ACCESS\r\nEnter washroom password: ");
			for (int i = 0; i < 4; i++) {
     794:	1d 82       	std	Y+5, r1	; 0x05
     796:	68 e0       	ldi	r22, 0x08	; 8
     798:	72 e0       	ldi	r23, 0x02	; 2
				enteredPass[i] = USART_ReceiveChar();
				USART_Transmit("*");
			}
			enteredPass[4] = '\0';
     79a:	ce 01       	movw	r24, r28

			if (strcmp((char*)enteredPass, (char*)washroomPassword) == 0 ||
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	cf d2       	rcall	.+1438   	; 0xd3e <strcmp>
     7a0:	89 2b       	or	r24, r25
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <tenant_management_system+0x168>
     7a4:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__data_end>
			(timeoutActive && strcmp((char*)enteredPass, (char*)tempAccessCode) == 0)) {
     7a8:	88 23       	and	r24, r24
				enteredPass[i] = USART_ReceiveChar();
				USART_Transmit("*");
			}
			enteredPass[4] = '\0';

			if (strcmp((char*)enteredPass, (char*)washroomPassword) == 0 ||
     7aa:	e1 f0       	breq	.+56     	; 0x7e4 <tenant_management_system+0x194>
     7ac:	b6 01       	movw	r22, r12
			(timeoutActive && strcmp((char*)enteredPass, (char*)tempAccessCode) == 0)) {
     7ae:	ce 01       	movw	r24, r28
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	c5 d2       	rcall	.+1418   	; 0xd3e <strcmp>
     7b4:	89 2b       	or	r24, r25
     7b6:	b1 f4       	brne	.+44     	; 0x7e4 <tenant_management_system+0x194>
     7b8:	83 e9       	ldi	r24, 0x93	; 147
				USART_Transmit("\nAccess granted.\r\n");
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	da dc       	rcall	.-1612   	; 0x172 <USART_Transmit>
     7be:	e6 de       	rcall	.-564    	; 0x58c <lcd2_clear>

				// Display message on the second LCD and activate motor
				lcd2_clear();
     7c0:	86 ea       	ldi	r24, 0xA6	; 166
     7c2:	94 e0       	ldi	r25, 0x04	; 4
				lcd2_display(" Access Washroom");
     7c4:	c9 de       	rcall	.-622    	; 0x558 <lcd2_display>
     7c6:	77 9a       	sbi	0x0e, 7	; 14
     7c8:	bf e7       	ldi	r27, 0x7F	; 127

				// Start the motor for washroom access
				PORTE |= (1 << PE7); // Motor ON
     7ca:	ef e4       	ldi	r30, 0x4F	; 79
     7cc:	f2 e1       	ldi	r31, 0x12	; 18
     7ce:	b1 50       	subi	r27, 0x01	; 1
     7d0:	e0 40       	sbci	r30, 0x00	; 0
     7d2:	f0 40       	sbci	r31, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <tenant_management_system+0x17e>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <tenant_management_system+0x188>
     7d8:	00 00       	nop
     7da:	77 98       	cbi	0x0e, 7	; 14
				_delay_ms(6000);     // Motor runs for 3 seconds (adjust as needed)
				PORTE &= ~(1 << PE7); // Motor OFF
				USART_Transmit("\nMotor stopped.\r\n");
     7dc:	87 eb       	ldi	r24, 0xB7	; 183
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	c8 dc       	rcall	.-1648   	; 0x172 <USART_Transmit>
     7e2:	8b c0       	rjmp	.+278    	; 0x8fa <tenant_management_system+0x2aa>
     7e4:	89 ec       	ldi	r24, 0xC9	; 201

				} else {
				USART_Transmit("\nInvalid access code.\r\n");
     7e6:	94 e0       	ldi	r25, 0x04	; 4
     7e8:	c4 dc       	rcall	.-1656   	; 0x172 <USART_Transmit>
     7ea:	87 c0       	rjmp	.+270    	; 0x8fa <tenant_management_system+0x2aa>
     7ec:	81 ee       	ldi	r24, 0xE1	; 225
			}
			break;

			case 3:
			USART_Transmit("\nASSIGN TEMPORARY ACCESS\r\nEnter a 4-digit access code: ");
     7ee:	94 e0       	ldi	r25, 0x04	; 4
     7f0:	c0 dc       	rcall	.-1664   	; 0x172 <USART_Transmit>
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f0 e5       	ldi	r31, 0x50	; 80
     7f6:	af 2e       	mov	r10, r31
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	bf 2e       	mov	r11, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	cf dc       	rcall	.-1634   	; 0x19e <USART_ReceiveChar>
			for (int i = 0; i < 4; i++) {
				tempAccessCode[i] = USART_ReceiveChar();
     800:	d5 01       	movw	r26, r10
     802:	8d 93       	st	X+, r24
     804:	5d 01       	movw	r10, r26
     806:	81 e9       	ldi	r24, 0x91	; 145
				USART_Transmit("*");
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	b3 dc       	rcall	.-1690   	; 0x172 <USART_Transmit>
     80c:	a0 16       	cp	r10, r16
     80e:	b1 06       	cpc	r11, r17
			}
			break;

			case 3:
			USART_Transmit("\nASSIGN TEMPORARY ACCESS\r\nEnter a 4-digit access code: ");
			for (int i = 0; i < 4; i++) {
     810:	b1 f7       	brne	.-20     	; 0x7fe <tenant_management_system+0x1ae>
     812:	f6 01       	movw	r30, r12
     814:	14 82       	std	Z+4, r1	; 0x04
				tempAccessCode[i] = USART_ReceiveChar();
				USART_Transmit("*");
			}
			tempAccessCode[4] = '\0';
     816:	89 e1       	ldi	r24, 0x19	; 25
     818:	95 e0       	ldi	r25, 0x05	; 5
			USART_Transmit("\nEnter timeout in seconds: ");
     81a:	ab dc       	rcall	.-1706   	; 0x172 <USART_Transmit>
     81c:	4e 01       	movw	r8, r28
     81e:	f6 e0       	ldi	r31, 0x06	; 6
     820:	8f 0e       	add	r8, r31
     822:	91 1c       	adc	r9, r1
     824:	a1 2c       	mov	r10, r1
     826:	b1 2c       	mov	r11, r1
			char timeoutStr[4];
			int i = 0;
     828:	05 c0       	rjmp	.+10     	; 0x834 <tenant_management_system+0x1e4>
			while ((timeoutStr[i] = USART_ReceiveChar()) != '\r') {
     82a:	90 e0       	ldi	r25, 0x00	; 0
				USART_Transmit(timeoutStr[i]);
     82c:	a2 dc       	rcall	.-1724   	; 0x172 <USART_Transmit>
     82e:	2f ef       	ldi	r18, 0xFF	; 255
     830:	a2 1a       	sub	r10, r18
				i++;
     832:	b2 0a       	sbc	r11, r18
     834:	b4 dc       	rcall	.-1688   	; 0x19e <USART_ReceiveChar>
			}
			tempAccessCode[4] = '\0';
			USART_Transmit("\nEnter timeout in seconds: ");
			char timeoutStr[4];
			int i = 0;
			while ((timeoutStr[i] = USART_ReceiveChar()) != '\r') {
     836:	d4 01       	movw	r26, r8
     838:	8d 93       	st	X+, r24
     83a:	4d 01       	movw	r8, r26
     83c:	8d 30       	cpi	r24, 0x0D	; 13
     83e:	a9 f7       	brne	.-22     	; 0x82a <tenant_management_system+0x1da>
				USART_Transmit(timeoutStr[i]);
				i++;
			}
			timeoutStr[i] = '\0';
     840:	e6 e0       	ldi	r30, 0x06	; 6
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ec 0f       	add	r30, r28
     846:	fd 1f       	adc	r31, r29
			tempAccessTimeout = atoi(timeoutStr);
     848:	ea 0d       	add	r30, r10
     84a:	fb 1d       	adc	r31, r11
     84c:	10 82       	st	Z, r1
     84e:	ce 01       	movw	r24, r28
     850:	06 96       	adiw	r24, 0x06	; 6
     852:	58 d2       	rcall	.+1200   	; 0xd04 <atoi>
			timeoutActive = 1;
     854:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <tempAccessTimeout>
			USART_Transmit("\nTemporary access assigned.\r\n");
     858:	60 92 4e 06 	sts	0x064E, r6	; 0x80064e <__data_end>
     85c:	85 e3       	ldi	r24, 0x35	; 53
     85e:	95 e0       	ldi	r25, 0x05	; 5
			break;

			case 4:
			if (rentPaid) {
     860:	88 dc       	rcall	.-1776   	; 0x172 <USART_Transmit>
				USART_Transmit("Rent is paid.\r\n");
     862:	4b c0       	rjmp	.+150    	; 0x8fa <tenant_management_system+0x2aa>
     864:	77 20       	and	r7, r7
     866:	21 f0       	breq	.+8      	; 0x870 <tenant_management_system+0x220>
     868:	83 e5       	ldi	r24, 0x53	; 83
     86a:	95 e0       	ldi	r25, 0x05	; 5
				} else {
				USART_Transmit("Rent is due.\r\n");
     86c:	82 dc       	rcall	.-1788   	; 0x172 <USART_Transmit>
     86e:	45 c0       	rjmp	.+138    	; 0x8fa <tenant_management_system+0x2aa>
     870:	86 e5       	ldi	r24, 0x56	; 86
     872:	94 e0       	ldi	r25, 0x04	; 4
     874:	7e dc       	rcall	.-1796   	; 0x172 <USART_Transmit>
			}
			break;

			case 5:
			displayFloorRates();
     876:	41 c0       	rjmp	.+130    	; 0x8fa <tenant_management_system+0x2aa>
     878:	cf de       	rcall	.-610    	; 0x618 <displayFloorRates>
			break;
     87a:	3f c0       	rjmp	.+126    	; 0x8fa <tenant_management_system+0x2aa>

			case 6: // Set Floor Rates (Admin)
			USART_Transmit("\nADMIN: SET FLOOR RATES\r\n");
     87c:	83 e6       	ldi	r24, 0x63	; 99
     87e:	95 e0       	ldi	r25, 0x05	; 5
			USART_Transmit("Enter First Floor Rate: ");
     880:	78 dc       	rcall	.-1808   	; 0x172 <USART_Transmit>
     882:	8d e7       	ldi	r24, 0x7D	; 125
     884:	95 e0       	ldi	r25, 0x05	; 5
     886:	75 dc       	rcall	.-1814   	; 0x172 <USART_Transmit>
			firstFloor = USART_ReceiveInt();
     888:	92 dc       	rcall	.-1756   	; 0x1ae <USART_ReceiveInt>
     88a:	09 2e       	mov	r0, r25
     88c:	00 0c       	add	r0, r0
     88e:	aa 0b       	sbc	r26, r26
     890:	bb 0b       	sbc	r27, r27
     892:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <firstFloor>
     896:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <firstFloor+0x1>
     89a:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <firstFloor+0x2>
     89e:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <firstFloor+0x3>
			USART_Transmit("Enter Second Floor Rate: ");
     8a2:	86 e9       	ldi	r24, 0x96	; 150
     8a4:	95 e0       	ldi	r25, 0x05	; 5
			secondFloor = USART_ReceiveInt();
     8a6:	65 dc       	rcall	.-1846   	; 0x172 <USART_Transmit>
     8a8:	82 dc       	rcall	.-1788   	; 0x1ae <USART_ReceiveInt>
     8aa:	09 2e       	mov	r0, r25
     8ac:	00 0c       	add	r0, r0
     8ae:	aa 0b       	sbc	r26, r26
     8b0:	bb 0b       	sbc	r27, r27
     8b2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <secondFloor>
     8b6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <secondFloor+0x1>
     8ba:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <secondFloor+0x2>
			USART_Transmit("Enter Third Floor Rate: ");
     8be:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <secondFloor+0x3>
     8c2:	80 eb       	ldi	r24, 0xB0	; 176
     8c4:	95 e0       	ldi	r25, 0x05	; 5
			thirdFloor = USART_ReceiveInt();
     8c6:	55 dc       	rcall	.-1878   	; 0x172 <USART_Transmit>
     8c8:	72 dc       	rcall	.-1820   	; 0x1ae <USART_ReceiveInt>
     8ca:	09 2e       	mov	r0, r25
     8cc:	00 0c       	add	r0, r0
     8ce:	aa 0b       	sbc	r26, r26
     8d0:	bb 0b       	sbc	r27, r27
     8d2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <thirdFloor>
     8d6:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <thirdFloor+0x1>
     8da:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <thirdFloor+0x2>
     8de:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <thirdFloor+0x3>
			updateFloorRatesEEPROM();
     8e2:	5d de       	rcall	.-838    	; 0x59e <updateFloorRatesEEPROM>
     8e4:	89 ec       	ldi	r24, 0xC9	; 201
			USART_Transmit("Floor rates updated.\r\n");
     8e6:	95 e0       	ldi	r25, 0x05	; 5
     8e8:	44 dc       	rcall	.-1912   	; 0x172 <USART_Transmit>
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <tenant_management_system+0x2aa>
     8ec:	80 ee       	ldi	r24, 0xE0	; 224
			break;
     8ee:	95 e0       	ldi	r25, 0x05	; 5

			case 7:
			USART_Transmit("Exiting system...\r\n");
     8f0:	40 dc       	rcall	.-1920   	; 0x172 <USART_Transmit>
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <tenant_management_system+0x2b4>
     8f4:	84 ef       	ldi	r24, 0xF4	; 244
     8f6:	95 e0       	ldi	r25, 0x05	; 5
			return;
     8f8:	3c dc       	rcall	.-1928   	; 0x172 <USART_Transmit>

			default:
			USART_Transmit("Invalid option.\r\n");
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	96 e0       	ldi	r25, 0x06	; 6
     8fe:	39 dc       	rcall	.-1934   	; 0x172 <USART_Transmit>
     900:	4e dc       	rcall	.-1892   	; 0x19e <USART_ReceiveChar>
			break;
		}
		USART_Transmit("\r\nPress any key to continue...");
     902:	d5 ce       	rjmp	.-598    	; 0x6ae <tenant_management_system+0x5e>
     904:	29 96       	adiw	r28, 0x09	; 9
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
		USART_ReceiveChar();
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
	}
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	08 95       	ret

0000092e <lcd_cmd>:
     92e:	85 b9       	out	0x05, r24	; 5
     930:	10 98       	cbi	0x02, 0	; 2
     932:	11 98       	cbi	0x02, 1	; 2
     934:	12 9a       	sbi	0x02, 2	; 2
     936:	83 ed       	ldi	r24, 0xD3	; 211
     938:	90 e3       	ldi	r25, 0x30	; 48
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <lcd_cmd+0xc>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <lcd_cmd+0x12>
     940:	00 00       	nop
	PORTB = cmd;
	PORTA &= ~(1 << PA0);  // RS=0 for command mode
	PORTA &= ~(1 << PA1);  // RW=0 for write mode
	PORTA |= (1 << PA2);   // Enable pulse
	_delay_ms(50);
	PORTA &= ~(1 << PA2);
     942:	12 98       	cbi	0x02, 2	; 2
     944:	08 95       	ret

00000946 <lcd_data1>:
}

void lcd_data1(unsigned char data) {
	PORTB = data;
     946:	85 b9       	out	0x05, r24	; 5
	PORTA |= (1 << PA0);   // RS=1 for data mode
     948:	10 9a       	sbi	0x02, 0	; 2
	PORTA &= ~(1 << PA1);  // RW=0 for write mode
     94a:	11 98       	cbi	0x02, 1	; 2
	PORTA |= (1 << PA2);   // Enable pulse
     94c:	12 9a       	sbi	0x02, 2	; 2
     94e:	83 ed       	ldi	r24, 0xD3	; 211
     950:	90 e3       	ldi	r25, 0x30	; 48
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <lcd_data1+0xc>
     956:	00 c0       	rjmp	.+0      	; 0x958 <lcd_data1+0x12>
     958:	00 00       	nop
	_delay_ms(50);
	PORTA &= ~(1 << PA2);
     95a:	12 98       	cbi	0x02, 2	; 2
     95c:	08 95       	ret

0000095e <lcd_init1>:
}

void lcd_init1() {
	lcd_cmd(0x38); // All lines and a 5x7 matrix
     95e:	88 e3       	ldi	r24, 0x38	; 56
     960:	e6 df       	rcall	.-52     	; 0x92e <lcd_cmd>
	lcd_cmd(0x0c); // Display on, cursor off
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	e4 df       	rcall	.-56     	; 0x92e <lcd_cmd>
	lcd_cmd(0x06); // Increment cursor
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	e2 df       	rcall	.-60     	; 0x92e <lcd_cmd>
	lcd_cmd(0x01); // Clear screen
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	e0 cf       	rjmp	.-64     	; 0x92e <lcd_cmd>
     96e:	08 95       	ret

00000970 <lcd_data_print>:
     970:	0f 93       	push	r16
}

void lcd_data_print(char info[]) {
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
	int len = strlen(info);
     978:	fc 01       	movw	r30, r24
     97a:	01 90       	ld	r0, Z+
     97c:	00 20       	and	r0, r0
     97e:	e9 f7       	brne	.-6      	; 0x97a <lcd_data_print+0xa>
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	e8 1b       	sub	r30, r24
     984:	f9 0b       	sbc	r31, r25
	for (int a = 0; a < len; a++) {
     986:	1e 16       	cp	r1, r30
     988:	1f 06       	cpc	r1, r31
     98a:	4c f4       	brge	.+18     	; 0x99e <lcd_data_print+0x2e>
     98c:	ec 01       	movw	r28, r24
     98e:	8c 01       	movw	r16, r24
     990:	0e 0f       	add	r16, r30
     992:	1f 1f       	adc	r17, r31
		lcd_data1(info[a]);
     994:	89 91       	ld	r24, Y+
     996:	d7 df       	rcall	.-82     	; 0x946 <lcd_data1>
	lcd_cmd(0x01); // Clear screen
}

void lcd_data_print(char info[]) {
	int len = strlen(info);
	for (int a = 0; a < len; a++) {
     998:	c0 17       	cp	r28, r16
     99a:	d1 07       	cpc	r29, r17
     99c:	d9 f7       	brne	.-10     	; 0x994 <lcd_data_print+0x24>
		lcd_data1(info[a]);
	}
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <lcd_clear1>:

void lcd_clear1() {
	lcd_cmd(0x01);
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	c1 df       	rcall	.-126    	; 0x92e <lcd_cmd>
     9ac:	83 ed       	ldi	r24, 0xD3	; 211
     9ae:	90 e3       	ldi	r25, 0x30	; 48
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <lcd_clear1+0x8>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <lcd_clear1+0xe>
     9b6:	00 00       	nop
     9b8:	08 95       	ret

000009ba <int_to_string>:
     9ba:	4a e0       	ldi	r20, 0x0A	; 10
     9bc:	c9 c1       	rjmp	.+914    	; 0xd50 <__itoa_ncheck>
     9be:	08 95       	ret

000009c0 <motor_init>:
	itoa(number, string, 10);
}

// Motor control functions
void motor_init() {
	DDRL |= (1 << PL0) | (1 << PL1);  // Set PL0 and PL1 as outputs
     9c0:	ea e0       	ldi	r30, 0x0A	; 10
     9c2:	f1 e0       	ldi	r31, 0x01	; 1
     9c4:	80 81       	ld	r24, Z
     9c6:	83 60       	ori	r24, 0x03	; 3
     9c8:	80 83       	st	Z, r24
	PORTL &= ~((1 << PL0) | (1 << PL1));  // Initially keep motors off
     9ca:	eb e0       	ldi	r30, 0x0B	; 11
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	80 81       	ld	r24, Z
     9d0:	8c 7f       	andi	r24, 0xFC	; 252
     9d2:	80 83       	st	Z, r24
     9d4:	08 95       	ret

000009d6 <motor_control>:
}

void motor_control(int level) {
	switch(level) {
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	91 05       	cpc	r25, r1
     9da:	19 f0       	breq	.+6      	; 0x9e2 <motor_control+0xc>
     9dc:	03 97       	sbiw	r24, 0x03	; 3
     9de:	99 f0       	breq	.+38     	; 0xa06 <motor_control+0x30>
     9e0:	08 95       	ret
		case 2:
		PORTL |= (1 << PL0);  // Turn on motor 1
     9e2:	eb e0       	ldi	r30, 0x0B	; 11
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	80 81       	ld	r24, Z
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	80 83       	st	Z, r24
     9ec:	2f e1       	ldi	r18, 0x1F	; 31
     9ee:	81 ea       	ldi	r24, 0xA1	; 161
     9f0:	97 e0       	ldi	r25, 0x07	; 7
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	90 40       	sbci	r25, 0x00	; 0
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <motor_control+0x1c>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <motor_control+0x26>
     9fc:	00 00       	nop
		_delay_ms(2500);      // Run for 1 second
		PORTL &= ~(1 << PL0); // Turn off motor 1
     9fe:	80 81       	ld	r24, Z
     a00:	8e 7f       	andi	r24, 0xFE	; 254
     a02:	80 83       	st	Z, r24
		break;
     a04:	08 95       	ret
		case 3:
		PORTL |= (1 << PL1);  // Turn on motor 2
     a06:	eb e0       	ldi	r30, 0x0B	; 11
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	80 81       	ld	r24, Z
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	80 83       	st	Z, r24
     a10:	2f e1       	ldi	r18, 0x1F	; 31
     a12:	81 ea       	ldi	r24, 0xA1	; 161
     a14:	97 e0       	ldi	r25, 0x07	; 7
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <motor_control+0x40>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <motor_control+0x4a>
     a20:	00 00       	nop
		_delay_ms(2500);      // Run for 1 second
		PORTL &= ~(1 << PL1); // Turn off motor 2
     a22:	80 81       	ld	r24, Z
     a24:	8d 7f       	andi	r24, 0xFD	; 253
     a26:	80 83       	st	Z, r24
     a28:	08 95       	ret

00000a2a <keypad_fun_t>:
	}
}

// Keypad function
int keypad_fun_t() {
	PORTK = 0b11111110;
     a2a:	8e ef       	ldi	r24, 0xFE	; 254
     a2c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	if ((PINK & (1 << 4)) == 0) return 3;
     a30:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a34:	84 ff       	sbrs	r24, 4
     a36:	48 c0       	rjmp	.+144    	; 0xac8 <keypad_fun_t+0x9e>
	if ((PINK & (1 << 5)) == 0) return 6;
     a38:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a3c:	85 ff       	sbrs	r24, 5
     a3e:	47 c0       	rjmp	.+142    	; 0xace <keypad_fun_t+0xa4>
	if ((PINK & (1 << 6)) == 0) return 9;
     a40:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a44:	86 ff       	sbrs	r24, 6
     a46:	46 c0       	rjmp	.+140    	; 0xad4 <keypad_fun_t+0xaa>
	if ((PINK & (1 << 7)) == 0) return 100;
     a48:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a4c:	88 23       	and	r24, r24
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <keypad_fun_t+0x28>
     a50:	44 c0       	rjmp	.+136    	; 0xada <keypad_fun_t+0xb0>
     a52:	83 ed       	ldi	r24, 0xD3	; 211
     a54:	90 e3       	ldi	r25, 0x30	; 48
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <keypad_fun_t+0x2c>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <keypad_fun_t+0x32>
     a5c:	00 00       	nop
	_delay_ms(50);
	
	PORTK = 0b11111101;
     a5e:	8d ef       	ldi	r24, 0xFD	; 253
     a60:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	if ((PINK & (1 << 4)) == 0) return 2;
     a64:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a68:	84 ff       	sbrs	r24, 4
     a6a:	3a c0       	rjmp	.+116    	; 0xae0 <keypad_fun_t+0xb6>
	if ((PINK & (1 << 5)) == 0) return 5;
     a6c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a70:	85 ff       	sbrs	r24, 5
     a72:	39 c0       	rjmp	.+114    	; 0xae6 <keypad_fun_t+0xbc>
	if ((PINK & (1 << 6)) == 0) return 8;
     a74:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a78:	86 ff       	sbrs	r24, 6
     a7a:	38 c0       	rjmp	.+112    	; 0xaec <keypad_fun_t+0xc2>
	if ((PINK & (1 << 7)) == 0) return 0;
     a7c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a80:	88 23       	and	r24, r24
     a82:	bc f5       	brge	.+110    	; 0xaf2 <keypad_fun_t+0xc8>
     a84:	83 ed       	ldi	r24, 0xD3	; 211
     a86:	90 e3       	ldi	r25, 0x30	; 48
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <keypad_fun_t+0x5e>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <keypad_fun_t+0x64>
     a8e:	00 00       	nop
	_delay_ms(50);
	
	PORTK = 0b11111011;
     a90:	8b ef       	ldi	r24, 0xFB	; 251
     a92:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	if ((PINK & (1 << 4)) == 0) return 1;
     a96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     a9a:	84 ff       	sbrs	r24, 4
     a9c:	2d c0       	rjmp	.+90     	; 0xaf8 <keypad_fun_t+0xce>
	if ((PINK & (1 << 5)) == 0) return 4;
     a9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     aa2:	85 ff       	sbrs	r24, 5
     aa4:	2c c0       	rjmp	.+88     	; 0xafe <keypad_fun_t+0xd4>
	if ((PINK & (1 << 6)) == 0) return 7;
     aa6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     aaa:	86 ff       	sbrs	r24, 6
     aac:	2b c0       	rjmp	.+86     	; 0xb04 <keypad_fun_t+0xda>
	if ((PINK & (1 << 7)) == 0) return 99;
     aae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
     ab2:	88 23       	and	r24, r24
     ab4:	54 f5       	brge	.+84     	; 0xb0a <keypad_fun_t+0xe0>
     ab6:	83 ed       	ldi	r24, 0xD3	; 211
     ab8:	90 e3       	ldi	r25, 0x30	; 48
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <keypad_fun_t+0x90>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <keypad_fun_t+0x96>
     ac0:	00 00       	nop
	_delay_ms(50);
	
	return 200; // No key pressed
     ac2:	88 ec       	ldi	r24, 0xC8	; 200
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	08 95       	ret
}

// Keypad function
int keypad_fun_t() {
	PORTK = 0b11111110;
	if ((PINK & (1 << 4)) == 0) return 3;
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 95       	ret
	if ((PINK & (1 << 5)) == 0) return 6;
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	08 95       	ret
	if ((PINK & (1 << 6)) == 0) return 9;
     ad4:	89 e0       	ldi	r24, 0x09	; 9
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	08 95       	ret
	if ((PINK & (1 << 7)) == 0) return 100;
     ada:	84 e6       	ldi	r24, 0x64	; 100
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	08 95       	ret
	_delay_ms(50);
	
	PORTK = 0b11111101;
	if ((PINK & (1 << 4)) == 0) return 2;
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	08 95       	ret
	if ((PINK & (1 << 5)) == 0) return 5;
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 95       	ret
	if ((PINK & (1 << 6)) == 0) return 8;
     aec:	88 e0       	ldi	r24, 0x08	; 8
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	08 95       	ret
	if ((PINK & (1 << 7)) == 0) return 0;
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	08 95       	ret
	_delay_ms(50);
	
	PORTK = 0b11111011;
	if ((PINK & (1 << 4)) == 0) return 1;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	08 95       	ret
	if ((PINK & (1 << 5)) == 0) return 4;
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	08 95       	ret
	if ((PINK & (1 << 6)) == 0) return 7;
     b04:	87 e0       	ldi	r24, 0x07	; 7
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	08 95       	ret
	if ((PINK & (1 << 7)) == 0) return 99;
     b0a:	83 e6       	ldi	r24, 0x63	; 99
     b0c:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(50);
	
	return 200; // No key pressed
}
     b0e:	08 95       	ret

00000b10 <main>:

int main(void) {
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	1f 92       	push	r1
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     b1c:	ef db       	rcall	.-2082   	; 0x2fc <lcd_init>
	USART_Init();
     b1e:	1d db       	rcall	.-2502   	; 0x15a <USART_Init>
	Timer1_Init();
     b20:	a6 dc       	rcall	.-1716   	; 0x46e <Timer1_Init>
	srand(time(NULL));
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	06 db       	rcall	.-2548   	; 0x134 <time>
     b28:	cb 01       	movw	r24, r22
	lcd2_init();
     b2a:	e1 d0       	rcall	.+450    	; 0xcee <srand>
     b2c:	01 dd       	rcall	.-1534   	; 0x530 <lcd2_init>
	

	
	set_configurations();
     b2e:	75 db       	rcall	.-2326   	; 0x21a <set_configurations>
     b30:	50 98       	cbi	0x0a, 0	; 10
	DDRD &= ~(1 << PD0);  // Set PD0 as input
     b32:	09 e6       	ldi	r16, 0x69	; 105
	EICRA |= (1 << ISC00);  // Trigger INT0 on any logical change
     b34:	10 e0       	ldi	r17, 0x00	; 0
     b36:	d8 01       	movw	r26, r16
     b38:	8c 91       	ld	r24, X
     b3a:	81 60       	ori	r24, 0x01	; 1
     b3c:	8c 93       	st	X, r24
	EIMSK |= (1 << INT0);  // Enable INT0 interrupt
     b3e:	e8 9a       	sbi	0x1d, 0	; 29
	sei();  // Enable global interrupts
     b40:	78 94       	sei
	tenant_management_system();
     b42:	86 dd       	rcall	.-1268   	; 0x650 <tenant_management_system>
     b44:	ea e0       	ldi	r30, 0x0A	; 10
	DDRL |= (1 << PL0) | (1 << PL1);  //
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	80 81       	ld	r24, Z
     b4a:	83 60       	ori	r24, 0x03	; 3
     b4c:	80 83       	st	Z, r24
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
	
	
	
	//new code
	// Initialize ports
	DDRB = 0xFF;   // LCD data lines as output
     b50:	84 b9       	out	0x04, r24	; 4
     b52:	81 b9       	out	0x01, r24	; 1
	DDRA = 0xFF;   // LCD control lines as output
     b54:	47 e0       	ldi	r20, 0x07	; 7
	DDRK = 0x0F;
     b56:	51 e0       	ldi	r21, 0x01	; 1
     b58:	2f e0       	ldi	r18, 0x0F	; 15
     b5a:	fa 01       	movw	r30, r20
     b5c:	20 83       	st	Z, r18
     b5e:	9d b1       	in	r25, 0x0d	; 13
	//DDRE = 0xFF;
	DDRE = DDRE |=(1<<2);
     b60:	94 60       	ori	r25, 0x04	; 4
     b62:	9d b9       	out	0x0d, r25	; 13
     b64:	9d b9       	out	0x0d, r25	; 13
     b66:	84 b9       	out	0x04, r24	; 4
	 // Initialize ports with proper configuration
	 DDRB = 0xFF;   // LCD data lines as output
     b68:	81 b9       	out	0x01, r24	; 1
	 DDRA = 0xFF;   // LCD control lines as output
     b6a:	20 83       	st	Z, r18
	 DDRK = 0x0F;   // Lower 4 bits as output for keypad
     b6c:	90 81       	ld	r25, Z
	 DDRK &= 0x0F;  // Upper 4 bits as input for keypad
     b6e:	9f 70       	andi	r25, 0x0F	; 15
     b70:	90 83       	st	Z, r25
     b72:	e8 e0       	ldi	r30, 0x08	; 8
	 PORTK |= 0xF0; // Enable pull-up resistors for keypad inputs
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	90 81       	ld	r25, Z
     b78:	90 6f       	ori	r25, 0xF0	; 240
     b7a:	90 83       	st	Z, r25
     b7c:	ea e6       	ldi	r30, 0x6A	; 106
	

	
	// Configure INT5 for rising edge trigger

	EICRB |= (1<<ISC51) | (1<<ISC50); // Rising edge trigger on INT5
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	90 81       	ld	r25, Z
     b82:	9c 60       	ori	r25, 0x0C	; 12
     b84:	90 83       	st	Z, r25
     b86:	d8 01       	movw	r26, r16
	EICRA |=(1<<ISC00) | (1<<ISC01);
     b88:	9c 91       	ld	r25, X
     b8a:	93 60       	ori	r25, 0x03	; 3
     b8c:	9c 93       	st	X, r25
     b8e:	90 81       	ld	r25, Z
	EICRB |=(1<<ISC40) | (1<<ISC41)|(1<<ISC50) | (1<<ISC51);//|(1<<ISC60) | (1<<ISC61);
     b90:	9f 60       	ori	r25, 0x0F	; 15
     b92:	90 83       	st	Z, r25
     b94:	9d b3       	in	r25, 0x1d	; 29
	
	 // Configure external interrupts
	 EIMSK |= (1<<INT4) | (1<<INT0) | (1<<INT5);
     b96:	91 63       	ori	r25, 0x31	; 49
     b98:	9d bb       	out	0x1d, r25	; 29
     b9a:	90 81       	ld	r25, Z
	 EICRB |= (1<<ISC51) | (1<<ISC50);
     b9c:	9c 60       	ori	r25, 0x0C	; 12
     b9e:	90 83       	st	Z, r25
     ba0:	9c 91       	ld	r25, X
	 EICRA |= (1<<ISC00) | (1<<ISC01);
     ba2:	93 60       	ori	r25, 0x03	; 3
     ba4:	9c 93       	st	X, r25
     ba6:	90 81       	ld	r25, Z
	 EICRB |= (1<<ISC40) | (1<<ISC41) | (1<<ISC50) | (1<<ISC51);
     ba8:	9f 60       	ori	r25, 0x0F	; 15
     baa:	90 83       	st	Z, r25

	 // Initialize ports
	 DDRB = 0xFF;   // LCD data lines as output
     bac:	84 b9       	out	0x04, r24	; 4
	 DDRA = 0xFF;   // LCD control lines as output
     bae:	81 b9       	out	0x01, r24	; 1
	 DDRK = 0x0F;   // Keypad rows as output
     bb0:	fa 01       	movw	r30, r20
	 DDRE = (1 << PE2); // Set PE2 as output for buzzer
     bb2:	20 83       	st	Z, r18
     bb4:	84 e0       	ldi	r24, 0x04	; 4
	 
	 // Initialize motors
	 motor_init();
     bb6:	8d b9       	out	0x0d, r24	; 13
     bb8:	03 df       	rcall	.-506    	; 0x9c0 <motor_init>
	 
	 // Initialize LCD
	 lcd_init1();
     bba:	d1 de       	rcall	.-606    	; 0x95e <lcd_init1>
     bbc:	85 e2       	ldi	r24, 0x25	; 37
	 lcd_data_print("Ready...");
     bbe:	96 e0       	ldi	r25, 0x06	; 6
     bc0:	d7 de       	rcall	.-594    	; 0x970 <lcd_data_print>
     bc2:	ff e3       	ldi	r31, 0x3F	; 63
     bc4:	2d e0       	ldi	r18, 0x0D	; 13
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	f1 50       	subi	r31, 0x01	; 1
     bca:	20 40       	sbci	r18, 0x00	; 0
     bcc:	80 40       	sbci	r24, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <main+0xb8>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <main+0xc2>
     bd2:	00 00       	nop
	 _delay_ms(1000);
	 lcd_clear1();
     bd4:	e9 de       	rcall	.-558    	; 0x9a8 <lcd_clear1>

	
	//int key;
	//char key_string[16];  // String to store the number
	while (1) {
		key = keypad_fun_t();
     bd6:	29 df       	rcall	.-430    	; 0xa2a <keypad_fun_t>
     bd8:	8c 01       	movw	r16, r24
		
		if (key != 200) {  // Only process if a key was pressed
     bda:	88 3c       	cpi	r24, 0xC8	; 200
     bdc:	91 05       	cpc	r25, r1
     bde:	d9 f3       	breq	.-10     	; 0xbd6 <main+0xc6>
			lcd_clear1();
     be0:	e3 de       	rcall	.-570    	; 0x9a8 <lcd_clear1>
     be2:	02 30       	cpi	r16, 0x02	; 2
			
			if (key == 2) {
     be4:	11 05       	cpc	r17, r1
     be6:	39 f4       	brne	.+14     	; 0xbf6 <main+0xe6>
				lcd_data_print("Access Level 2");
     be8:	8e e2       	ldi	r24, 0x2E	; 46
     bea:	96 e0       	ldi	r25, 0x06	; 6
     bec:	c1 de       	rcall	.-638    	; 0x970 <lcd_data_print>
				motor_control(2);
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	f1 de       	rcall	.-542    	; 0x9d6 <motor_control>
     bf4:	20 c0       	rjmp	.+64     	; 0xc36 <main+0x126>
			}
			else if (key == 3) {
     bf6:	03 30       	cpi	r16, 0x03	; 3
     bf8:	11 05       	cpc	r17, r1
     bfa:	39 f4       	brne	.+14     	; 0xc0a <main+0xfa>
				lcd_data_print("Access Level 3");
     bfc:	8d e3       	ldi	r24, 0x3D	; 61
     bfe:	96 e0       	ldi	r25, 0x06	; 6
     c00:	b7 de       	rcall	.-658    	; 0x970 <lcd_data_print>
				motor_control(3);
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	e7 de       	rcall	.-562    	; 0x9d6 <motor_control>
     c08:	16 c0       	rjmp	.+44     	; 0xc36 <main+0x126>
     c0a:	04 36       	cpi	r16, 0x64	; 100
			}
			else if (key == 100) {
     c0c:	11 05       	cpc	r17, r1
     c0e:	21 f4       	brne	.+8      	; 0xc18 <main+0x108>
				lcd_data_print("*");
     c10:	81 e9       	ldi	r24, 0x91	; 145
     c12:	94 e0       	ldi	r25, 0x04	; 4
     c14:	ad de       	rcall	.-678    	; 0x970 <lcd_data_print>
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <main+0x126>
			}
			else if (key == 99) {
     c18:	03 36       	cpi	r16, 0x63	; 99
     c1a:	11 05       	cpc	r17, r1
     c1c:	21 f4       	brne	.+8      	; 0xc26 <main+0x116>
				lcd_data_print("#");
     c1e:	8c e4       	ldi	r24, 0x4C	; 76
     c20:	96 e0       	ldi	r25, 0x06	; 6
     c22:	a6 de       	rcall	.-692    	; 0x970 <lcd_data_print>
     c24:	08 c0       	rjmp	.+16     	; 0xc36 <main+0x126>
     c26:	be 01       	movw	r22, r28
			}
			else {  // Display the key press
				int_to_string(key, key_string);
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	c8 01       	movw	r24, r16
     c2e:	c5 de       	rcall	.-630    	; 0x9ba <int_to_string>
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
				lcd_data_print(key_string);
     c34:	9d de       	rcall	.-710    	; 0x970 <lcd_data_print>
     c36:	9f e9       	ldi	r25, 0x9F	; 159
     c38:	a6 e8       	ldi	r26, 0x86	; 134
     c3a:	b1 e0       	ldi	r27, 0x01	; 1
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	a0 40       	sbci	r26, 0x00	; 0
     c40:	b0 40       	sbci	r27, 0x00	; 0
     c42:	e1 f7       	brne	.-8      	; 0xc3c <main+0x12c>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <main+0x136>
     c46:	00 00       	nop
     c48:	c6 cf       	rjmp	.-116    	; 0xbd6 <main+0xc6>

00000c4a <__tablejump2__>:
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	88 1f       	adc	r24, r24
     c50:	8b bf       	out	0x3b, r24	; 59
     c52:	07 90       	elpm	r0, Z+
     c54:	f6 91       	elpm	r31, Z
     c56:	e0 2d       	mov	r30, r0
     c58:	19 94       	eijmp

00000c5a <do_rand>:
     c5a:	8f 92       	push	r8
     c5c:	9f 92       	push	r9
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	ec 01       	movw	r28, r24
     c70:	68 81       	ld	r22, Y
     c72:	79 81       	ldd	r23, Y+1	; 0x01
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	61 15       	cp	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	81 05       	cpc	r24, r1
     c7e:	91 05       	cpc	r25, r1
     c80:	21 f4       	brne	.+8      	; 0xc8a <do_rand+0x30>
     c82:	64 e2       	ldi	r22, 0x24	; 36
     c84:	79 ed       	ldi	r23, 0xD9	; 217
     c86:	8b e5       	ldi	r24, 0x5B	; 91
     c88:	97 e0       	ldi	r25, 0x07	; 7
     c8a:	2d e1       	ldi	r18, 0x1D	; 29
     c8c:	33 ef       	ldi	r19, 0xF3	; 243
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	9d d3       	rcall	.+1850   	; 0x13ce <__divmodsi4>
     c94:	49 01       	movw	r8, r18
     c96:	5a 01       	movw	r10, r20
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	a7 ea       	ldi	r26, 0xA7	; 167
     c9e:	b1 e4       	ldi	r27, 0x41	; 65
     ca0:	b2 d3       	rcall	.+1892   	; 0x1406 <__muluhisi3>
     ca2:	6b 01       	movw	r12, r22
     ca4:	7c 01       	movw	r14, r24
     ca6:	ac ee       	ldi	r26, 0xEC	; 236
     ca8:	b4 ef       	ldi	r27, 0xF4	; 244
     caa:	a5 01       	movw	r20, r10
     cac:	94 01       	movw	r18, r8
     cae:	b7 d3       	rcall	.+1902   	; 0x141e <__mulohisi3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8c 0d       	add	r24, r12
     cb6:	9d 1d       	adc	r25, r13
     cb8:	ae 1d       	adc	r26, r14
     cba:	bf 1d       	adc	r27, r15
     cbc:	b7 ff       	sbrs	r27, 7
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <do_rand+0x6c>
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	a1 09       	sbc	r26, r1
     cc4:	b0 48       	sbci	r27, 0x80	; 128
     cc6:	88 83       	st	Y, r24
     cc8:	99 83       	std	Y+1, r25	; 0x01
     cca:	aa 83       	std	Y+2, r26	; 0x02
     ccc:	bb 83       	std	Y+3, r27	; 0x03
     cce:	9f 77       	andi	r25, 0x7F	; 127
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	9f 90       	pop	r9
     ce2:	8f 90       	pop	r8
     ce4:	08 95       	ret

00000ce6 <rand_r>:
     ce6:	b9 cf       	rjmp	.-142    	; 0xc5a <do_rand>

00000ce8 <rand>:
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	b6 cf       	rjmp	.-148    	; 0xc5a <do_rand>

00000cee <srand>:
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     cf6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     cfa:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
     cfe:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
     d02:	08 95       	ret

00000d04 <atoi>:
     d04:	fc 01       	movw	r30, r24
     d06:	88 27       	eor	r24, r24
     d08:	99 27       	eor	r25, r25
     d0a:	e8 94       	clt
     d0c:	21 91       	ld	r18, Z+
     d0e:	20 32       	cpi	r18, 0x20	; 32
     d10:	e9 f3       	breq	.-6      	; 0xd0c <atoi+0x8>
     d12:	29 30       	cpi	r18, 0x09	; 9
     d14:	10 f0       	brcs	.+4      	; 0xd1a <atoi+0x16>
     d16:	2e 30       	cpi	r18, 0x0E	; 14
     d18:	c8 f3       	brcs	.-14     	; 0xd0c <atoi+0x8>
     d1a:	2b 32       	cpi	r18, 0x2B	; 43
     d1c:	39 f0       	breq	.+14     	; 0xd2c <atoi+0x28>
     d1e:	2d 32       	cpi	r18, 0x2D	; 45
     d20:	31 f4       	brne	.+12     	; 0xd2e <atoi+0x2a>
     d22:	68 94       	set
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <atoi+0x28>
     d26:	1e d0       	rcall	.+60     	; 0xd64 <__mulhi_const_10>
     d28:	82 0f       	add	r24, r18
     d2a:	91 1d       	adc	r25, r1
     d2c:	21 91       	ld	r18, Z+
     d2e:	20 53       	subi	r18, 0x30	; 48
     d30:	2a 30       	cpi	r18, 0x0A	; 10
     d32:	c8 f3       	brcs	.-14     	; 0xd26 <atoi+0x22>
     d34:	1e f4       	brtc	.+6      	; 0xd3c <atoi+0x38>
     d36:	90 95       	com	r25
     d38:	81 95       	neg	r24
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <strcmp>:
     d3e:	fb 01       	movw	r30, r22
     d40:	dc 01       	movw	r26, r24
     d42:	8d 91       	ld	r24, X+
     d44:	01 90       	ld	r0, Z+
     d46:	80 19       	sub	r24, r0
     d48:	01 10       	cpse	r0, r1
     d4a:	d9 f3       	breq	.-10     	; 0xd42 <strcmp+0x4>
     d4c:	99 0b       	sbc	r25, r25
     d4e:	08 95       	ret

00000d50 <__itoa_ncheck>:
     d50:	bb 27       	eor	r27, r27
     d52:	4a 30       	cpi	r20, 0x0A	; 10
     d54:	31 f4       	brne	.+12     	; 0xd62 <__itoa_ncheck+0x12>
     d56:	99 23       	and	r25, r25
     d58:	22 f4       	brpl	.+8      	; 0xd62 <__itoa_ncheck+0x12>
     d5a:	bd e2       	ldi	r27, 0x2D	; 45
     d5c:	90 95       	com	r25
     d5e:	81 95       	neg	r24
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	09 c0       	rjmp	.+18     	; 0xd76 <__utoa_common>

00000d64 <__mulhi_const_10>:
     d64:	7a e0       	ldi	r23, 0x0A	; 10
     d66:	97 9f       	mul	r25, r23
     d68:	90 2d       	mov	r25, r0
     d6a:	87 9f       	mul	r24, r23
     d6c:	80 2d       	mov	r24, r0
     d6e:	91 0d       	add	r25, r1
     d70:	11 24       	eor	r1, r1
     d72:	08 95       	ret

00000d74 <__utoa_ncheck>:
     d74:	bb 27       	eor	r27, r27

00000d76 <__utoa_common>:
     d76:	fb 01       	movw	r30, r22
     d78:	55 27       	eor	r21, r21
     d7a:	aa 27       	eor	r26, r26
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	aa 1f       	adc	r26, r26
     d82:	a4 17       	cp	r26, r20
     d84:	10 f0       	brcs	.+4      	; 0xd8a <__utoa_common+0x14>
     d86:	a4 1b       	sub	r26, r20
     d88:	83 95       	inc	r24
     d8a:	50 51       	subi	r21, 0x10	; 16
     d8c:	b9 f7       	brne	.-18     	; 0xd7c <__utoa_common+0x6>
     d8e:	a0 5d       	subi	r26, 0xD0	; 208
     d90:	aa 33       	cpi	r26, 0x3A	; 58
     d92:	08 f0       	brcs	.+2      	; 0xd96 <__utoa_common+0x20>
     d94:	a9 5d       	subi	r26, 0xD9	; 217
     d96:	a1 93       	st	Z+, r26
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	79 f7       	brne	.-34     	; 0xd7a <__utoa_common+0x4>
     d9c:	b1 11       	cpse	r27, r1
     d9e:	b1 93       	st	Z+, r27
     da0:	11 92       	st	Z+, r1
     da2:	cb 01       	movw	r24, r22
     da4:	41 c2       	rjmp	.+1154   	; 0x1228 <strrev>

00000da6 <sprintf>:
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2e 97       	sbiw	r28, 0x0e	; 14
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	0e 89       	ldd	r16, Y+22	; 0x16
     dc0:	1f 89       	ldd	r17, Y+23	; 0x17
     dc2:	86 e0       	ldi	r24, 0x06	; 6
     dc4:	8c 83       	std	Y+4, r24	; 0x04
     dc6:	1a 83       	std	Y+2, r17	; 0x02
     dc8:	09 83       	std	Y+1, r16	; 0x01
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	9f e7       	ldi	r25, 0x7F	; 127
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	ae 01       	movw	r20, r28
     dd4:	46 5e       	subi	r20, 0xE6	; 230
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	68 8d       	ldd	r22, Y+24	; 0x18
     dda:	79 8d       	ldd	r23, Y+25	; 0x19
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	10 d0       	rcall	.+32     	; 0xe02 <vfprintf>
     de2:	ef 81       	ldd	r30, Y+7	; 0x07
     de4:	f8 85       	ldd	r31, Y+8	; 0x08
     de6:	e0 0f       	add	r30, r16
     de8:	f1 1f       	adc	r31, r17
     dea:	10 82       	st	Z, r1
     dec:	2e 96       	adiw	r28, 0x0e	; 14
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <vfprintf>:
     e02:	2f 92       	push	r2
     e04:	3f 92       	push	r3
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	2b 97       	sbiw	r28, 0x0b	; 11
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	6c 01       	movw	r12, r24
     e38:	7b 01       	movw	r14, r22
     e3a:	8a 01       	movw	r16, r20
     e3c:	fc 01       	movw	r30, r24
     e3e:	17 82       	std	Z+7, r1	; 0x07
     e40:	16 82       	std	Z+6, r1	; 0x06
     e42:	83 81       	ldd	r24, Z+3	; 0x03
     e44:	81 ff       	sbrs	r24, 1
     e46:	bf c1       	rjmp	.+894    	; 0x11c6 <vfprintf+0x3c4>
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	3c 01       	movw	r6, r24
     e4e:	f6 01       	movw	r30, r12
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	f7 01       	movw	r30, r14
     e54:	93 fd       	sbrc	r25, 3
     e56:	85 91       	lpm	r24, Z+
     e58:	93 ff       	sbrs	r25, 3
     e5a:	81 91       	ld	r24, Z+
     e5c:	7f 01       	movw	r14, r30
     e5e:	88 23       	and	r24, r24
     e60:	09 f4       	brne	.+2      	; 0xe64 <vfprintf+0x62>
     e62:	ad c1       	rjmp	.+858    	; 0x11be <vfprintf+0x3bc>
     e64:	85 32       	cpi	r24, 0x25	; 37
     e66:	39 f4       	brne	.+14     	; 0xe76 <vfprintf+0x74>
     e68:	93 fd       	sbrc	r25, 3
     e6a:	85 91       	lpm	r24, Z+
     e6c:	93 ff       	sbrs	r25, 3
     e6e:	81 91       	ld	r24, Z+
     e70:	7f 01       	movw	r14, r30
     e72:	85 32       	cpi	r24, 0x25	; 37
     e74:	21 f4       	brne	.+8      	; 0xe7e <vfprintf+0x7c>
     e76:	b6 01       	movw	r22, r12
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	e6 d1       	rcall	.+972    	; 0x1248 <fputc>
     e7c:	e8 cf       	rjmp	.-48     	; 0xe4e <vfprintf+0x4c>
     e7e:	91 2c       	mov	r9, r1
     e80:	21 2c       	mov	r2, r1
     e82:	31 2c       	mov	r3, r1
     e84:	ff e1       	ldi	r31, 0x1F	; 31
     e86:	f3 15       	cp	r31, r3
     e88:	d8 f0       	brcs	.+54     	; 0xec0 <vfprintf+0xbe>
     e8a:	8b 32       	cpi	r24, 0x2B	; 43
     e8c:	79 f0       	breq	.+30     	; 0xeac <vfprintf+0xaa>
     e8e:	38 f4       	brcc	.+14     	; 0xe9e <vfprintf+0x9c>
     e90:	80 32       	cpi	r24, 0x20	; 32
     e92:	79 f0       	breq	.+30     	; 0xeb2 <vfprintf+0xb0>
     e94:	83 32       	cpi	r24, 0x23	; 35
     e96:	a1 f4       	brne	.+40     	; 0xec0 <vfprintf+0xbe>
     e98:	23 2d       	mov	r18, r3
     e9a:	20 61       	ori	r18, 0x10	; 16
     e9c:	1d c0       	rjmp	.+58     	; 0xed8 <vfprintf+0xd6>
     e9e:	8d 32       	cpi	r24, 0x2D	; 45
     ea0:	61 f0       	breq	.+24     	; 0xeba <vfprintf+0xb8>
     ea2:	80 33       	cpi	r24, 0x30	; 48
     ea4:	69 f4       	brne	.+26     	; 0xec0 <vfprintf+0xbe>
     ea6:	23 2d       	mov	r18, r3
     ea8:	21 60       	ori	r18, 0x01	; 1
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <vfprintf+0xd6>
     eac:	83 2d       	mov	r24, r3
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	38 2e       	mov	r3, r24
     eb2:	e3 2d       	mov	r30, r3
     eb4:	e4 60       	ori	r30, 0x04	; 4
     eb6:	3e 2e       	mov	r3, r30
     eb8:	2a c0       	rjmp	.+84     	; 0xf0e <vfprintf+0x10c>
     eba:	f3 2d       	mov	r31, r3
     ebc:	f8 60       	ori	r31, 0x08	; 8
     ebe:	1d c0       	rjmp	.+58     	; 0xefa <vfprintf+0xf8>
     ec0:	37 fc       	sbrc	r3, 7
     ec2:	2d c0       	rjmp	.+90     	; 0xf1e <vfprintf+0x11c>
     ec4:	20 ed       	ldi	r18, 0xD0	; 208
     ec6:	28 0f       	add	r18, r24
     ec8:	2a 30       	cpi	r18, 0x0A	; 10
     eca:	40 f0       	brcs	.+16     	; 0xedc <vfprintf+0xda>
     ecc:	8e 32       	cpi	r24, 0x2E	; 46
     ece:	b9 f4       	brne	.+46     	; 0xefe <vfprintf+0xfc>
     ed0:	36 fc       	sbrc	r3, 6
     ed2:	75 c1       	rjmp	.+746    	; 0x11be <vfprintf+0x3bc>
     ed4:	23 2d       	mov	r18, r3
     ed6:	20 64       	ori	r18, 0x40	; 64
     ed8:	32 2e       	mov	r3, r18
     eda:	19 c0       	rjmp	.+50     	; 0xf0e <vfprintf+0x10c>
     edc:	36 fe       	sbrs	r3, 6
     ede:	06 c0       	rjmp	.+12     	; 0xeec <vfprintf+0xea>
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	98 9e       	mul	r9, r24
     ee4:	20 0d       	add	r18, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	92 2e       	mov	r9, r18
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <vfprintf+0x10c>
     eec:	ea e0       	ldi	r30, 0x0A	; 10
     eee:	2e 9e       	mul	r2, r30
     ef0:	20 0d       	add	r18, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	22 2e       	mov	r2, r18
     ef6:	f3 2d       	mov	r31, r3
     ef8:	f0 62       	ori	r31, 0x20	; 32
     efa:	3f 2e       	mov	r3, r31
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <vfprintf+0x10c>
     efe:	8c 36       	cpi	r24, 0x6C	; 108
     f00:	21 f4       	brne	.+8      	; 0xf0a <vfprintf+0x108>
     f02:	83 2d       	mov	r24, r3
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	38 2e       	mov	r3, r24
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <vfprintf+0x10c>
     f0a:	88 36       	cpi	r24, 0x68	; 104
     f0c:	41 f4       	brne	.+16     	; 0xf1e <vfprintf+0x11c>
     f0e:	f7 01       	movw	r30, r14
     f10:	93 fd       	sbrc	r25, 3
     f12:	85 91       	lpm	r24, Z+
     f14:	93 ff       	sbrs	r25, 3
     f16:	81 91       	ld	r24, Z+
     f18:	7f 01       	movw	r14, r30
     f1a:	81 11       	cpse	r24, r1
     f1c:	b3 cf       	rjmp	.-154    	; 0xe84 <vfprintf+0x82>
     f1e:	98 2f       	mov	r25, r24
     f20:	9f 7d       	andi	r25, 0xDF	; 223
     f22:	95 54       	subi	r25, 0x45	; 69
     f24:	93 30       	cpi	r25, 0x03	; 3
     f26:	28 f4       	brcc	.+10     	; 0xf32 <vfprintf+0x130>
     f28:	0c 5f       	subi	r16, 0xFC	; 252
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	9f e3       	ldi	r25, 0x3F	; 63
     f2e:	99 83       	std	Y+1, r25	; 0x01
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <vfprintf+0x14a>
     f32:	83 36       	cpi	r24, 0x63	; 99
     f34:	31 f0       	breq	.+12     	; 0xf42 <vfprintf+0x140>
     f36:	83 37       	cpi	r24, 0x73	; 115
     f38:	71 f0       	breq	.+28     	; 0xf56 <vfprintf+0x154>
     f3a:	83 35       	cpi	r24, 0x53	; 83
     f3c:	09 f0       	breq	.+2      	; 0xf40 <vfprintf+0x13e>
     f3e:	55 c0       	rjmp	.+170    	; 0xfea <vfprintf+0x1e8>
     f40:	20 c0       	rjmp	.+64     	; 0xf82 <vfprintf+0x180>
     f42:	f8 01       	movw	r30, r16
     f44:	80 81       	ld	r24, Z
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	0e 5f       	subi	r16, 0xFE	; 254
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	88 24       	eor	r8, r8
     f4e:	83 94       	inc	r8
     f50:	91 2c       	mov	r9, r1
     f52:	53 01       	movw	r10, r6
     f54:	12 c0       	rjmp	.+36     	; 0xf7a <vfprintf+0x178>
     f56:	28 01       	movw	r4, r16
     f58:	f2 e0       	ldi	r31, 0x02	; 2
     f5a:	4f 0e       	add	r4, r31
     f5c:	51 1c       	adc	r5, r1
     f5e:	f8 01       	movw	r30, r16
     f60:	a0 80       	ld	r10, Z
     f62:	b1 80       	ldd	r11, Z+1	; 0x01
     f64:	36 fe       	sbrs	r3, 6
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <vfprintf+0x16c>
     f68:	69 2d       	mov	r22, r9
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <vfprintf+0x170>
     f6e:	6f ef       	ldi	r22, 0xFF	; 255
     f70:	7f ef       	ldi	r23, 0xFF	; 255
     f72:	c5 01       	movw	r24, r10
     f74:	4e d1       	rcall	.+668    	; 0x1212 <strnlen>
     f76:	4c 01       	movw	r8, r24
     f78:	82 01       	movw	r16, r4
     f7a:	f3 2d       	mov	r31, r3
     f7c:	ff 77       	andi	r31, 0x7F	; 127
     f7e:	3f 2e       	mov	r3, r31
     f80:	15 c0       	rjmp	.+42     	; 0xfac <vfprintf+0x1aa>
     f82:	28 01       	movw	r4, r16
     f84:	22 e0       	ldi	r18, 0x02	; 2
     f86:	42 0e       	add	r4, r18
     f88:	51 1c       	adc	r5, r1
     f8a:	f8 01       	movw	r30, r16
     f8c:	a0 80       	ld	r10, Z
     f8e:	b1 80       	ldd	r11, Z+1	; 0x01
     f90:	36 fe       	sbrs	r3, 6
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <vfprintf+0x198>
     f94:	69 2d       	mov	r22, r9
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0x19c>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	c5 01       	movw	r24, r10
     fa0:	2d d1       	rcall	.+602    	; 0x11fc <strnlen_P>
     fa2:	4c 01       	movw	r8, r24
     fa4:	f3 2d       	mov	r31, r3
     fa6:	f0 68       	ori	r31, 0x80	; 128
     fa8:	3f 2e       	mov	r3, r31
     faa:	82 01       	movw	r16, r4
     fac:	33 fc       	sbrc	r3, 3
     fae:	19 c0       	rjmp	.+50     	; 0xfe2 <vfprintf+0x1e0>
     fb0:	82 2d       	mov	r24, r2
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	88 16       	cp	r8, r24
     fb6:	99 06       	cpc	r9, r25
     fb8:	a0 f4       	brcc	.+40     	; 0xfe2 <vfprintf+0x1e0>
     fba:	b6 01       	movw	r22, r12
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	43 d1       	rcall	.+646    	; 0x1248 <fputc>
     fc2:	2a 94       	dec	r2
     fc4:	f5 cf       	rjmp	.-22     	; 0xfb0 <vfprintf+0x1ae>
     fc6:	f5 01       	movw	r30, r10
     fc8:	37 fc       	sbrc	r3, 7
     fca:	85 91       	lpm	r24, Z+
     fcc:	37 fe       	sbrs	r3, 7
     fce:	81 91       	ld	r24, Z+
     fd0:	5f 01       	movw	r10, r30
     fd2:	b6 01       	movw	r22, r12
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	38 d1       	rcall	.+624    	; 0x1248 <fputc>
     fd8:	21 10       	cpse	r2, r1
     fda:	2a 94       	dec	r2
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	82 1a       	sub	r8, r18
     fe0:	91 08       	sbc	r9, r1
     fe2:	81 14       	cp	r8, r1
     fe4:	91 04       	cpc	r9, r1
     fe6:	79 f7       	brne	.-34     	; 0xfc6 <vfprintf+0x1c4>
     fe8:	e1 c0       	rjmp	.+450    	; 0x11ac <vfprintf+0x3aa>
     fea:	84 36       	cpi	r24, 0x64	; 100
     fec:	11 f0       	breq	.+4      	; 0xff2 <vfprintf+0x1f0>
     fee:	89 36       	cpi	r24, 0x69	; 105
     ff0:	39 f5       	brne	.+78     	; 0x1040 <vfprintf+0x23e>
     ff2:	f8 01       	movw	r30, r16
     ff4:	37 fe       	sbrs	r3, 7
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <vfprintf+0x204>
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0c 5f       	subi	r16, 0xFC	; 252
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	08 c0       	rjmp	.+16     	; 0x1016 <vfprintf+0x214>
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	07 2e       	mov	r0, r23
    100c:	00 0c       	add	r0, r0
    100e:	88 0b       	sbc	r24, r24
    1010:	99 0b       	sbc	r25, r25
    1012:	0e 5f       	subi	r16, 0xFE	; 254
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	f3 2d       	mov	r31, r3
    1018:	ff 76       	andi	r31, 0x6F	; 111
    101a:	3f 2e       	mov	r3, r31
    101c:	97 ff       	sbrs	r25, 7
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <vfprintf+0x230>
    1020:	90 95       	com	r25
    1022:	80 95       	com	r24
    1024:	70 95       	com	r23
    1026:	61 95       	neg	r22
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	f0 68       	ori	r31, 0x80	; 128
    1030:	3f 2e       	mov	r3, r31
    1032:	2a e0       	ldi	r18, 0x0A	; 10
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	a3 01       	movw	r20, r6
    1038:	43 d1       	rcall	.+646    	; 0x12c0 <__ultoa_invert>
    103a:	88 2e       	mov	r8, r24
    103c:	86 18       	sub	r8, r6
    103e:	44 c0       	rjmp	.+136    	; 0x10c8 <vfprintf+0x2c6>
    1040:	85 37       	cpi	r24, 0x75	; 117
    1042:	31 f4       	brne	.+12     	; 0x1050 <vfprintf+0x24e>
    1044:	23 2d       	mov	r18, r3
    1046:	2f 7e       	andi	r18, 0xEF	; 239
    1048:	b2 2e       	mov	r11, r18
    104a:	2a e0       	ldi	r18, 0x0A	; 10
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	25 c0       	rjmp	.+74     	; 0x109a <vfprintf+0x298>
    1050:	93 2d       	mov	r25, r3
    1052:	99 7f       	andi	r25, 0xF9	; 249
    1054:	b9 2e       	mov	r11, r25
    1056:	8f 36       	cpi	r24, 0x6F	; 111
    1058:	c1 f0       	breq	.+48     	; 0x108a <vfprintf+0x288>
    105a:	18 f4       	brcc	.+6      	; 0x1062 <vfprintf+0x260>
    105c:	88 35       	cpi	r24, 0x58	; 88
    105e:	79 f0       	breq	.+30     	; 0x107e <vfprintf+0x27c>
    1060:	ae c0       	rjmp	.+348    	; 0x11be <vfprintf+0x3bc>
    1062:	80 37       	cpi	r24, 0x70	; 112
    1064:	19 f0       	breq	.+6      	; 0x106c <vfprintf+0x26a>
    1066:	88 37       	cpi	r24, 0x78	; 120
    1068:	21 f0       	breq	.+8      	; 0x1072 <vfprintf+0x270>
    106a:	a9 c0       	rjmp	.+338    	; 0x11be <vfprintf+0x3bc>
    106c:	e9 2f       	mov	r30, r25
    106e:	e0 61       	ori	r30, 0x10	; 16
    1070:	be 2e       	mov	r11, r30
    1072:	b4 fe       	sbrs	r11, 4
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <vfprintf+0x28e>
    1076:	fb 2d       	mov	r31, r11
    1078:	f4 60       	ori	r31, 0x04	; 4
    107a:	bf 2e       	mov	r11, r31
    107c:	09 c0       	rjmp	.+18     	; 0x1090 <vfprintf+0x28e>
    107e:	34 fe       	sbrs	r3, 4
    1080:	0a c0       	rjmp	.+20     	; 0x1096 <vfprintf+0x294>
    1082:	29 2f       	mov	r18, r25
    1084:	26 60       	ori	r18, 0x06	; 6
    1086:	b2 2e       	mov	r11, r18
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <vfprintf+0x294>
    108a:	28 e0       	ldi	r18, 0x08	; 8
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	05 c0       	rjmp	.+10     	; 0x109a <vfprintf+0x298>
    1090:	20 e1       	ldi	r18, 0x10	; 16
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	02 c0       	rjmp	.+4      	; 0x109a <vfprintf+0x298>
    1096:	20 e1       	ldi	r18, 0x10	; 16
    1098:	32 e0       	ldi	r19, 0x02	; 2
    109a:	f8 01       	movw	r30, r16
    109c:	b7 fe       	sbrs	r11, 7
    109e:	07 c0       	rjmp	.+14     	; 0x10ae <vfprintf+0x2ac>
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	0c 5f       	subi	r16, 0xFC	; 252
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfprintf+0x2b8>
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 5f       	subi	r16, 0xFE	; 254
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	a3 01       	movw	r20, r6
    10bc:	01 d1       	rcall	.+514    	; 0x12c0 <__ultoa_invert>
    10be:	88 2e       	mov	r8, r24
    10c0:	86 18       	sub	r8, r6
    10c2:	fb 2d       	mov	r31, r11
    10c4:	ff 77       	andi	r31, 0x7F	; 127
    10c6:	3f 2e       	mov	r3, r31
    10c8:	36 fe       	sbrs	r3, 6
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <vfprintf+0x2e4>
    10cc:	23 2d       	mov	r18, r3
    10ce:	2e 7f       	andi	r18, 0xFE	; 254
    10d0:	a2 2e       	mov	r10, r18
    10d2:	89 14       	cp	r8, r9
    10d4:	58 f4       	brcc	.+22     	; 0x10ec <vfprintf+0x2ea>
    10d6:	34 fe       	sbrs	r3, 4
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <vfprintf+0x2ee>
    10da:	32 fc       	sbrc	r3, 2
    10dc:	09 c0       	rjmp	.+18     	; 0x10f0 <vfprintf+0x2ee>
    10de:	83 2d       	mov	r24, r3
    10e0:	8e 7e       	andi	r24, 0xEE	; 238
    10e2:	a8 2e       	mov	r10, r24
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <vfprintf+0x2ee>
    10e6:	b8 2c       	mov	r11, r8
    10e8:	a3 2c       	mov	r10, r3
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <vfprintf+0x2f0>
    10ec:	b8 2c       	mov	r11, r8
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x2f0>
    10f0:	b9 2c       	mov	r11, r9
    10f2:	a4 fe       	sbrs	r10, 4
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <vfprintf+0x312>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e8 0d       	add	r30, r8
    10fa:	f1 1d       	adc	r31, r1
    10fc:	80 81       	ld	r24, Z
    10fe:	80 33       	cpi	r24, 0x30	; 48
    1100:	21 f4       	brne	.+8      	; 0x110a <vfprintf+0x308>
    1102:	9a 2d       	mov	r25, r10
    1104:	99 7e       	andi	r25, 0xE9	; 233
    1106:	a9 2e       	mov	r10, r25
    1108:	09 c0       	rjmp	.+18     	; 0x111c <vfprintf+0x31a>
    110a:	a2 fe       	sbrs	r10, 2
    110c:	06 c0       	rjmp	.+12     	; 0x111a <vfprintf+0x318>
    110e:	b3 94       	inc	r11
    1110:	b3 94       	inc	r11
    1112:	04 c0       	rjmp	.+8      	; 0x111c <vfprintf+0x31a>
    1114:	8a 2d       	mov	r24, r10
    1116:	86 78       	andi	r24, 0x86	; 134
    1118:	09 f0       	breq	.+2      	; 0x111c <vfprintf+0x31a>
    111a:	b3 94       	inc	r11
    111c:	a3 fc       	sbrc	r10, 3
    111e:	10 c0       	rjmp	.+32     	; 0x1140 <vfprintf+0x33e>
    1120:	a0 fe       	sbrs	r10, 0
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0x32e>
    1124:	b2 14       	cp	r11, r2
    1126:	80 f4       	brcc	.+32     	; 0x1148 <vfprintf+0x346>
    1128:	28 0c       	add	r2, r8
    112a:	92 2c       	mov	r9, r2
    112c:	9b 18       	sub	r9, r11
    112e:	0d c0       	rjmp	.+26     	; 0x114a <vfprintf+0x348>
    1130:	b2 14       	cp	r11, r2
    1132:	58 f4       	brcc	.+22     	; 0x114a <vfprintf+0x348>
    1134:	b6 01       	movw	r22, r12
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	86 d0       	rcall	.+268    	; 0x1248 <fputc>
    113c:	b3 94       	inc	r11
    113e:	f8 cf       	rjmp	.-16     	; 0x1130 <vfprintf+0x32e>
    1140:	b2 14       	cp	r11, r2
    1142:	18 f4       	brcc	.+6      	; 0x114a <vfprintf+0x348>
    1144:	2b 18       	sub	r2, r11
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x34a>
    1148:	98 2c       	mov	r9, r8
    114a:	21 2c       	mov	r2, r1
    114c:	a4 fe       	sbrs	r10, 4
    114e:	0f c0       	rjmp	.+30     	; 0x116e <vfprintf+0x36c>
    1150:	b6 01       	movw	r22, r12
    1152:	80 e3       	ldi	r24, 0x30	; 48
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	78 d0       	rcall	.+240    	; 0x1248 <fputc>
    1158:	a2 fe       	sbrs	r10, 2
    115a:	16 c0       	rjmp	.+44     	; 0x1188 <vfprintf+0x386>
    115c:	a1 fc       	sbrc	r10, 1
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <vfprintf+0x364>
    1160:	88 e7       	ldi	r24, 0x78	; 120
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <vfprintf+0x368>
    1166:	88 e5       	ldi	r24, 0x58	; 88
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	b6 01       	movw	r22, r12
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <vfprintf+0x384>
    116e:	8a 2d       	mov	r24, r10
    1170:	86 78       	andi	r24, 0x86	; 134
    1172:	51 f0       	breq	.+20     	; 0x1188 <vfprintf+0x386>
    1174:	a1 fe       	sbrs	r10, 1
    1176:	02 c0       	rjmp	.+4      	; 0x117c <vfprintf+0x37a>
    1178:	8b e2       	ldi	r24, 0x2B	; 43
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vfprintf+0x37c>
    117c:	80 e2       	ldi	r24, 0x20	; 32
    117e:	a7 fc       	sbrc	r10, 7
    1180:	8d e2       	ldi	r24, 0x2D	; 45
    1182:	b6 01       	movw	r22, r12
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	60 d0       	rcall	.+192    	; 0x1248 <fputc>
    1188:	89 14       	cp	r8, r9
    118a:	30 f4       	brcc	.+12     	; 0x1198 <vfprintf+0x396>
    118c:	b6 01       	movw	r22, r12
    118e:	80 e3       	ldi	r24, 0x30	; 48
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	5a d0       	rcall	.+180    	; 0x1248 <fputc>
    1194:	9a 94       	dec	r9
    1196:	f8 cf       	rjmp	.-16     	; 0x1188 <vfprintf+0x386>
    1198:	8a 94       	dec	r8
    119a:	f3 01       	movw	r30, r6
    119c:	e8 0d       	add	r30, r8
    119e:	f1 1d       	adc	r31, r1
    11a0:	80 81       	ld	r24, Z
    11a2:	b6 01       	movw	r22, r12
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	50 d0       	rcall	.+160    	; 0x1248 <fputc>
    11a8:	81 10       	cpse	r8, r1
    11aa:	f6 cf       	rjmp	.-20     	; 0x1198 <vfprintf+0x396>
    11ac:	22 20       	and	r2, r2
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x3b0>
    11b0:	4e ce       	rjmp	.-868    	; 0xe4e <vfprintf+0x4c>
    11b2:	b6 01       	movw	r22, r12
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	47 d0       	rcall	.+142    	; 0x1248 <fputc>
    11ba:	2a 94       	dec	r2
    11bc:	f7 cf       	rjmp	.-18     	; 0x11ac <vfprintf+0x3aa>
    11be:	f6 01       	movw	r30, r12
    11c0:	86 81       	ldd	r24, Z+6	; 0x06
    11c2:	97 81       	ldd	r25, Z+7	; 0x07
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x3c8>
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	2b 96       	adiw	r28, 0x0b	; 11
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	7f 90       	pop	r7
    11f0:	6f 90       	pop	r6
    11f2:	5f 90       	pop	r5
    11f4:	4f 90       	pop	r4
    11f6:	3f 90       	pop	r3
    11f8:	2f 90       	pop	r2
    11fa:	08 95       	ret

000011fc <strnlen_P>:
    11fc:	fc 01       	movw	r30, r24
    11fe:	05 90       	lpm	r0, Z+
    1200:	61 50       	subi	r22, 0x01	; 1
    1202:	70 40       	sbci	r23, 0x00	; 0
    1204:	01 10       	cpse	r0, r1
    1206:	d8 f7       	brcc	.-10     	; 0x11fe <strnlen_P+0x2>
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	8e 0f       	add	r24, r30
    120e:	9f 1f       	adc	r25, r31
    1210:	08 95       	ret

00001212 <strnlen>:
    1212:	fc 01       	movw	r30, r24
    1214:	61 50       	subi	r22, 0x01	; 1
    1216:	70 40       	sbci	r23, 0x00	; 0
    1218:	01 90       	ld	r0, Z+
    121a:	01 10       	cpse	r0, r1
    121c:	d8 f7       	brcc	.-10     	; 0x1214 <strnlen+0x2>
    121e:	80 95       	com	r24
    1220:	90 95       	com	r25
    1222:	8e 0f       	add	r24, r30
    1224:	9f 1f       	adc	r25, r31
    1226:	08 95       	ret

00001228 <strrev>:
    1228:	dc 01       	movw	r26, r24
    122a:	fc 01       	movw	r30, r24
    122c:	67 2f       	mov	r22, r23
    122e:	71 91       	ld	r23, Z+
    1230:	77 23       	and	r23, r23
    1232:	e1 f7       	brne	.-8      	; 0x122c <strrev+0x4>
    1234:	32 97       	sbiw	r30, 0x02	; 2
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <strrev+0x18>
    1238:	7c 91       	ld	r23, X
    123a:	6d 93       	st	X+, r22
    123c:	70 83       	st	Z, r23
    123e:	62 91       	ld	r22, -Z
    1240:	ae 17       	cp	r26, r30
    1242:	bf 07       	cpc	r27, r31
    1244:	c8 f3       	brcs	.-14     	; 0x1238 <strrev+0x10>
    1246:	08 95       	ret

00001248 <fputc>:
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	fb 01       	movw	r30, r22
    1252:	23 81       	ldd	r18, Z+3	; 0x03
    1254:	21 fd       	sbrc	r18, 1
    1256:	03 c0       	rjmp	.+6      	; 0x125e <fputc+0x16>
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	2c c0       	rjmp	.+88     	; 0x12b6 <fputc+0x6e>
    125e:	22 ff       	sbrs	r18, 2
    1260:	16 c0       	rjmp	.+44     	; 0x128e <fputc+0x46>
    1262:	46 81       	ldd	r20, Z+6	; 0x06
    1264:	57 81       	ldd	r21, Z+7	; 0x07
    1266:	24 81       	ldd	r18, Z+4	; 0x04
    1268:	35 81       	ldd	r19, Z+5	; 0x05
    126a:	42 17       	cp	r20, r18
    126c:	53 07       	cpc	r21, r19
    126e:	44 f4       	brge	.+16     	; 0x1280 <fputc+0x38>
    1270:	a0 81       	ld	r26, Z
    1272:	b1 81       	ldd	r27, Z+1	; 0x01
    1274:	9d 01       	movw	r18, r26
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	31 83       	std	Z+1, r19	; 0x01
    127c:	20 83       	st	Z, r18
    127e:	8c 93       	st	X, r24
    1280:	26 81       	ldd	r18, Z+6	; 0x06
    1282:	37 81       	ldd	r19, Z+7	; 0x07
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	37 83       	std	Z+7, r19	; 0x07
    128a:	26 83       	std	Z+6, r18	; 0x06
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <fputc+0x6e>
    128e:	8b 01       	movw	r16, r22
    1290:	ec 01       	movw	r28, r24
    1292:	fb 01       	movw	r30, r22
    1294:	00 84       	ldd	r0, Z+8	; 0x08
    1296:	f1 85       	ldd	r31, Z+9	; 0x09
    1298:	e0 2d       	mov	r30, r0
    129a:	19 95       	eicall
    129c:	89 2b       	or	r24, r25
    129e:	e1 f6       	brne	.-72     	; 0x1258 <fputc+0x10>
    12a0:	d8 01       	movw	r26, r16
    12a2:	16 96       	adiw	r26, 0x06	; 6
    12a4:	8d 91       	ld	r24, X+
    12a6:	9c 91       	ld	r25, X
    12a8:	17 97       	sbiw	r26, 0x07	; 7
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	17 96       	adiw	r26, 0x07	; 7
    12ae:	9c 93       	st	X, r25
    12b0:	8e 93       	st	-X, r24
    12b2:	16 97       	sbiw	r26, 0x06	; 6
    12b4:	ce 01       	movw	r24, r28
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <__ultoa_invert>:
    12c0:	fa 01       	movw	r30, r20
    12c2:	aa 27       	eor	r26, r26
    12c4:	28 30       	cpi	r18, 0x08	; 8
    12c6:	51 f1       	breq	.+84     	; 0x131c <__ultoa_invert+0x5c>
    12c8:	20 31       	cpi	r18, 0x10	; 16
    12ca:	81 f1       	breq	.+96     	; 0x132c <__ultoa_invert+0x6c>
    12cc:	e8 94       	clt
    12ce:	6f 93       	push	r22
    12d0:	6e 7f       	andi	r22, 0xFE	; 254
    12d2:	6e 5f       	subi	r22, 0xFE	; 254
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	af 4f       	sbci	r26, 0xFF	; 255
    12dc:	b1 e0       	ldi	r27, 0x01	; 1
    12de:	3e d0       	rcall	.+124    	; 0x135c <__ultoa_invert+0x9c>
    12e0:	b4 e0       	ldi	r27, 0x04	; 4
    12e2:	3c d0       	rcall	.+120    	; 0x135c <__ultoa_invert+0x9c>
    12e4:	67 0f       	add	r22, r23
    12e6:	78 1f       	adc	r23, r24
    12e8:	89 1f       	adc	r24, r25
    12ea:	9a 1f       	adc	r25, r26
    12ec:	a1 1d       	adc	r26, r1
    12ee:	68 0f       	add	r22, r24
    12f0:	79 1f       	adc	r23, r25
    12f2:	8a 1f       	adc	r24, r26
    12f4:	91 1d       	adc	r25, r1
    12f6:	a1 1d       	adc	r26, r1
    12f8:	6a 0f       	add	r22, r26
    12fa:	71 1d       	adc	r23, r1
    12fc:	81 1d       	adc	r24, r1
    12fe:	91 1d       	adc	r25, r1
    1300:	a1 1d       	adc	r26, r1
    1302:	20 d0       	rcall	.+64     	; 0x1344 <__ultoa_invert+0x84>
    1304:	09 f4       	brne	.+2      	; 0x1308 <__ultoa_invert+0x48>
    1306:	68 94       	set
    1308:	3f 91       	pop	r19
    130a:	2a e0       	ldi	r18, 0x0A	; 10
    130c:	26 9f       	mul	r18, r22
    130e:	11 24       	eor	r1, r1
    1310:	30 19       	sub	r19, r0
    1312:	30 5d       	subi	r19, 0xD0	; 208
    1314:	31 93       	st	Z+, r19
    1316:	de f6       	brtc	.-74     	; 0x12ce <__ultoa_invert+0xe>
    1318:	cf 01       	movw	r24, r30
    131a:	08 95       	ret
    131c:	46 2f       	mov	r20, r22
    131e:	47 70       	andi	r20, 0x07	; 7
    1320:	40 5d       	subi	r20, 0xD0	; 208
    1322:	41 93       	st	Z+, r20
    1324:	b3 e0       	ldi	r27, 0x03	; 3
    1326:	0f d0       	rcall	.+30     	; 0x1346 <__ultoa_invert+0x86>
    1328:	c9 f7       	brne	.-14     	; 0x131c <__ultoa_invert+0x5c>
    132a:	f6 cf       	rjmp	.-20     	; 0x1318 <__ultoa_invert+0x58>
    132c:	46 2f       	mov	r20, r22
    132e:	4f 70       	andi	r20, 0x0F	; 15
    1330:	40 5d       	subi	r20, 0xD0	; 208
    1332:	4a 33       	cpi	r20, 0x3A	; 58
    1334:	18 f0       	brcs	.+6      	; 0x133c <__ultoa_invert+0x7c>
    1336:	49 5d       	subi	r20, 0xD9	; 217
    1338:	31 fd       	sbrc	r19, 1
    133a:	40 52       	subi	r20, 0x20	; 32
    133c:	41 93       	st	Z+, r20
    133e:	02 d0       	rcall	.+4      	; 0x1344 <__ultoa_invert+0x84>
    1340:	a9 f7       	brne	.-22     	; 0x132c <__ultoa_invert+0x6c>
    1342:	ea cf       	rjmp	.-44     	; 0x1318 <__ultoa_invert+0x58>
    1344:	b4 e0       	ldi	r27, 0x04	; 4
    1346:	a6 95       	lsr	r26
    1348:	97 95       	ror	r25
    134a:	87 95       	ror	r24
    134c:	77 95       	ror	r23
    134e:	67 95       	ror	r22
    1350:	ba 95       	dec	r27
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__ultoa_invert+0x86>
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	61 05       	cpc	r22, r1
    1358:	71 05       	cpc	r23, r1
    135a:	08 95       	ret
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	0a 2e       	mov	r0, r26
    1362:	06 94       	lsr	r0
    1364:	57 95       	ror	r21
    1366:	47 95       	ror	r20
    1368:	37 95       	ror	r19
    136a:	27 95       	ror	r18
    136c:	ba 95       	dec	r27
    136e:	c9 f7       	brne	.-14     	; 0x1362 <__ultoa_invert+0xa2>
    1370:	62 0f       	add	r22, r18
    1372:	73 1f       	adc	r23, r19
    1374:	84 1f       	adc	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	a0 1d       	adc	r26, r0
    137a:	08 95       	ret

0000137c <eeprom_update_block>:
    137c:	dc 01       	movw	r26, r24
    137e:	a4 0f       	add	r26, r20
    1380:	b5 1f       	adc	r27, r21
    1382:	41 50       	subi	r20, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	40 f0       	brcs	.+16     	; 0x1398 <eeprom_update_block+0x1c>
    1388:	cb 01       	movw	r24, r22
    138a:	84 0f       	add	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	2e 91       	ld	r18, -X
    1390:	05 d0       	rcall	.+10     	; 0x139c <eeprom_update_r18>
    1392:	41 50       	subi	r20, 0x01	; 1
    1394:	50 40       	sbci	r21, 0x00	; 0
    1396:	d8 f7       	brcc	.-10     	; 0x138e <eeprom_update_block+0x12>
    1398:	08 95       	ret

0000139a <eeprom_update_byte>:
    139a:	26 2f       	mov	r18, r22

0000139c <eeprom_update_r18>:
    139c:	f9 99       	sbic	0x1f, 1	; 31
    139e:	fe cf       	rjmp	.-4      	; 0x139c <eeprom_update_r18>
    13a0:	92 bd       	out	0x22, r25	; 34
    13a2:	81 bd       	out	0x21, r24	; 33
    13a4:	f8 9a       	sbi	0x1f, 0	; 31
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	00 b4       	in	r0, 0x20	; 32
    13aa:	02 16       	cp	r0, r18
    13ac:	39 f0       	breq	.+14     	; 0x13bc <eeprom_update_r18+0x20>
    13ae:	1f ba       	out	0x1f, r1	; 31
    13b0:	20 bd       	out	0x20, r18	; 32
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	fa 9a       	sbi	0x1f, 2	; 31
    13b8:	f9 9a       	sbi	0x1f, 1	; 31
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	08 95       	ret

000013be <eeprom_update_dword>:
    13be:	03 96       	adiw	r24, 0x03	; 3
    13c0:	27 2f       	mov	r18, r23
    13c2:	ec df       	rcall	.-40     	; 0x139c <eeprom_update_r18>
    13c4:	ea df       	rcall	.-44     	; 0x139a <eeprom_update_byte>
    13c6:	25 2f       	mov	r18, r21
    13c8:	e9 df       	rcall	.-46     	; 0x139c <eeprom_update_r18>
    13ca:	24 2f       	mov	r18, r20
    13cc:	e7 cf       	rjmp	.-50     	; 0x139c <eeprom_update_r18>

000013ce <__divmodsi4>:
    13ce:	05 2e       	mov	r0, r21
    13d0:	97 fb       	bst	r25, 7
    13d2:	16 f4       	brtc	.+4      	; 0x13d8 <__divmodsi4+0xa>
    13d4:	00 94       	com	r0
    13d6:	0f d0       	rcall	.+30     	; 0x13f6 <__negsi2>
    13d8:	57 fd       	sbrc	r21, 7
    13da:	05 d0       	rcall	.+10     	; 0x13e6 <__divmodsi4_neg2>
    13dc:	24 d0       	rcall	.+72     	; 0x1426 <__udivmodsi4>
    13de:	07 fc       	sbrc	r0, 7
    13e0:	02 d0       	rcall	.+4      	; 0x13e6 <__divmodsi4_neg2>
    13e2:	46 f4       	brtc	.+16     	; 0x13f4 <__divmodsi4_exit>
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <__negsi2>

000013e6 <__divmodsi4_neg2>:
    13e6:	50 95       	com	r21
    13e8:	40 95       	com	r20
    13ea:	30 95       	com	r19
    13ec:	21 95       	neg	r18
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	4f 4f       	sbci	r20, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255

000013f4 <__divmodsi4_exit>:
    13f4:	08 95       	ret

000013f6 <__negsi2>:
    13f6:	90 95       	com	r25
    13f8:	80 95       	com	r24
    13fa:	70 95       	com	r23
    13fc:	61 95       	neg	r22
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	8f 4f       	sbci	r24, 0xFF	; 255
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	08 95       	ret

00001406 <__muluhisi3>:
    1406:	31 d0       	rcall	.+98     	; 0x146a <__umulhisi3>
    1408:	a5 9f       	mul	r26, r21
    140a:	90 0d       	add	r25, r0
    140c:	b4 9f       	mul	r27, r20
    140e:	90 0d       	add	r25, r0
    1410:	a4 9f       	mul	r26, r20
    1412:	80 0d       	add	r24, r0
    1414:	91 1d       	adc	r25, r1
    1416:	11 24       	eor	r1, r1
    1418:	08 95       	ret

0000141a <__mulshisi3>:
    141a:	b7 ff       	sbrs	r27, 7
    141c:	f4 cf       	rjmp	.-24     	; 0x1406 <__muluhisi3>

0000141e <__mulohisi3>:
    141e:	f3 df       	rcall	.-26     	; 0x1406 <__muluhisi3>
    1420:	82 1b       	sub	r24, r18
    1422:	93 0b       	sbc	r25, r19
    1424:	08 95       	ret

00001426 <__udivmodsi4>:
    1426:	a1 e2       	ldi	r26, 0x21	; 33
    1428:	1a 2e       	mov	r1, r26
    142a:	aa 1b       	sub	r26, r26
    142c:	bb 1b       	sub	r27, r27
    142e:	fd 01       	movw	r30, r26
    1430:	0d c0       	rjmp	.+26     	; 0x144c <__udivmodsi4_ep>

00001432 <__udivmodsi4_loop>:
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	ee 1f       	adc	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	a2 17       	cp	r26, r18
    143c:	b3 07       	cpc	r27, r19
    143e:	e4 07       	cpc	r30, r20
    1440:	f5 07       	cpc	r31, r21
    1442:	20 f0       	brcs	.+8      	; 0x144c <__udivmodsi4_ep>
    1444:	a2 1b       	sub	r26, r18
    1446:	b3 0b       	sbc	r27, r19
    1448:	e4 0b       	sbc	r30, r20
    144a:	f5 0b       	sbc	r31, r21

0000144c <__udivmodsi4_ep>:
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	88 1f       	adc	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	1a 94       	dec	r1
    1456:	69 f7       	brne	.-38     	; 0x1432 <__udivmodsi4_loop>
    1458:	60 95       	com	r22
    145a:	70 95       	com	r23
    145c:	80 95       	com	r24
    145e:	90 95       	com	r25
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	bd 01       	movw	r22, r26
    1466:	cf 01       	movw	r24, r30
    1468:	08 95       	ret

0000146a <__umulhisi3>:
    146a:	a2 9f       	mul	r26, r18
    146c:	b0 01       	movw	r22, r0
    146e:	b3 9f       	mul	r27, r19
    1470:	c0 01       	movw	r24, r0
    1472:	a3 9f       	mul	r26, r19
    1474:	70 0d       	add	r23, r0
    1476:	81 1d       	adc	r24, r1
    1478:	11 24       	eor	r1, r1
    147a:	91 1d       	adc	r25, r1
    147c:	b2 9f       	mul	r27, r18
    147e:	70 0d       	add	r23, r0
    1480:	81 1d       	adc	r24, r1
    1482:	11 24       	eor	r1, r1
    1484:	91 1d       	adc	r25, r1
    1486:	08 95       	ret

00001488 <_exit>:
    1488:	f8 94       	cli

0000148a <__stop_program>:
    148a:	ff cf       	rjmp	.-2      	; 0x148a <__stop_program>
